/*
 * (c) 2008 MOSA - The Managed Operating System Alliance
 *
 * Licensed under the terms of the New BSD License.
 *
 * Authors:
 *  Michael Fröhlich (aka grover, <mailto:sharpos@michaelruck.de>)
 *  
 */

using System;

using MbUnit.Framework;

namespace Test.Mosa.Runtime.CompilerFramework.CLI
{
    [TestFixture]
    [Importance(Importance.Critical)]
    [Category(@"Basic types")]
    [Description(@"Tests support for the basic type System.Int32")]
    public class Int32Fixture : RuntimeFixture
    {
        private readonly ArithmeticInstructionTestRunner<int, int> arithmeticTests = new ArithmeticInstructionTestRunner<int, int>
        {
            ExpectedTypeName = @"int",
            TypeName = @"int"
        };

		private readonly BinaryLogicInstructionTestRunner<int, int, int> logicTests = new BinaryLogicInstructionTestRunner<int, int, int>
		{
			ExpectedTypeName = @"int",
			TypeName = @"int",
			ShiftTypeName = @"int",
			IncludeNot = false
		};

        private readonly ComparisonInstructionTestRunner<int> comparisonTests = new ComparisonInstructionTestRunner<int>
        {
            TypeName = @"int"
        };

        private readonly SZArrayInstructionTestRunner<int> arrayTests = new SZArrayInstructionTestRunner<int>
        {
            TypeName = @"int"
        };

		#region Add

		[Row(0, 0)]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		[Row(0, -1)]
		[Row(0, -2)]
		[Row(0, Int32.MinValue + 2)]
		[Row(0, -17)]
		[Row(0, -123)]
		[Row(1, 0)]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		[Row(1, -1)]
		[Row(1, -2)]
		[Row(1, Int32.MinValue + 2)]
		[Row(1, -17)]
		[Row(1, -123)]
		[Row(2, 0)]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		[Row(2, -1)]
		[Row(2, -2)]
		[Row(2, Int32.MinValue + 2)]
		[Row(2, -17)]
		[Row(2, -123)]
		[Row(Int32.MinValue, 0)]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		[Row(Int32.MinValue, -1)]
		[Row(Int32.MinValue, -2)]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		[Row(Int32.MinValue, -17)]
		[Row(Int32.MinValue, -123)]
		[Row(Int32.MaxValue, 0)]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		[Row(Int32.MaxValue, -1)]
		[Row(Int32.MaxValue, -2)]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		[Row(Int32.MaxValue, -17)]
		[Row(Int32.MaxValue, -123)]
		[Row(Int32.MinValue + 1, 0)]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		[Row(Int32.MinValue + 1, -1)]
		[Row(Int32.MinValue + 1, -2)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 1, -17)]
		[Row(Int32.MinValue + 1, -123)]
		[Row(Int32.MaxValue - 1, 0)]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		[Row(Int32.MaxValue - 1, -1)]
		[Row(Int32.MaxValue - 1, -2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		[Row(Int32.MaxValue - 1, -17)]
		[Row(Int32.MaxValue - 1, -123)]
		[Row(17, 0)]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		[Row(17, -1)]
		[Row(17, -2)]
		[Row(17, Int32.MinValue + 2)]
		[Row(17, -17)]
		[Row(17, -123)]
		[Row(123, 0)]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		[Row(123, -1)]
		[Row(123, -2)]
		[Row(123, Int32.MinValue + 2)]
		[Row(123, -17)]
		[Row(123, -123)]
		[Row(-1, 0)]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		[Row(-1, -1)]
		[Row(-1, -2)]
		[Row(-1, Int32.MinValue + 2)]
		[Row(-1, -17)]
		[Row(-1, -123)]
		[Row(-2, 0)]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		[Row(-2, -1)]
		[Row(-2, -2)]
		[Row(-2, Int32.MinValue + 2)]
		[Row(-2, -17)]
		[Row(-2, -123)]
		[Row(Int32.MinValue + 2, 0)]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		[Row(Int32.MinValue + 2, -1)]
		[Row(Int32.MinValue + 2, -2)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 2, -17)]
		[Row(Int32.MinValue + 2, -123)]
		[Row(-17, 0)]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		[Row(-17, -1)]
		[Row(-17, -2)]
		[Row(-17, Int32.MinValue + 2)]
		[Row(-17, -17)]
		[Row(-17, -123)]
		[Row(-123, 0)]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		[Row(-123, -1)]
		[Row(-123, -2)]
		[Row(-123, Int32.MinValue + 2)]
		[Row(-123, -17)]
		[Row(-123, -123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Add(int a, int b)
		{
			this.arithmeticTests.Add((a + b), a, b);
		}

		#endregion // Add

		#region Sub

		[Row(0, 0)]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		[Row(0, -1)]
		[Row(0, -2)]
		[Row(0, Int32.MinValue + 2)]
		[Row(0, -17)]
		[Row(0, -123)]
		[Row(1, 0)]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		[Row(1, -1)]
		[Row(1, -2)]
		[Row(1, Int32.MinValue + 2)]
		[Row(1, -17)]
		[Row(1, -123)]
		[Row(2, 0)]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		[Row(2, -1)]
		[Row(2, -2)]
		[Row(2, Int32.MinValue + 2)]
		[Row(2, -17)]
		[Row(2, -123)]
		[Row(Int32.MinValue, 0)]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		[Row(Int32.MinValue, -1)]
		[Row(Int32.MinValue, -2)]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		[Row(Int32.MinValue, -17)]
		[Row(Int32.MinValue, -123)]
		[Row(Int32.MaxValue, 0)]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		[Row(Int32.MaxValue, -1)]
		[Row(Int32.MaxValue, -2)]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		[Row(Int32.MaxValue, -17)]
		[Row(Int32.MaxValue, -123)]
		[Row(Int32.MinValue + 1, 0)]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		[Row(Int32.MinValue + 1, -1)]
		[Row(Int32.MinValue + 1, -2)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 1, -17)]
		[Row(Int32.MinValue + 1, -123)]
		[Row(Int32.MaxValue - 1, 0)]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		[Row(Int32.MaxValue - 1, -1)]
		[Row(Int32.MaxValue - 1, -2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		[Row(Int32.MaxValue - 1, -17)]
		[Row(Int32.MaxValue - 1, -123)]
		[Row(17, 0)]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		[Row(17, -1)]
		[Row(17, -2)]
		[Row(17, Int32.MinValue + 2)]
		[Row(17, -17)]
		[Row(17, -123)]
		[Row(123, 0)]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		[Row(123, -1)]
		[Row(123, -2)]
		[Row(123, Int32.MinValue + 2)]
		[Row(123, -17)]
		[Row(123, -123)]
		[Row(-1, 0)]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		[Row(-1, -1)]
		[Row(-1, -2)]
		[Row(-1, Int32.MinValue + 2)]
		[Row(-1, -17)]
		[Row(-1, -123)]
		[Row(-2, 0)]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		[Row(-2, -1)]
		[Row(-2, -2)]
		[Row(-2, Int32.MinValue + 2)]
		[Row(-2, -17)]
		[Row(-2, -123)]
		[Row(Int32.MinValue + 2, 0)]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		[Row(Int32.MinValue + 2, -1)]
		[Row(Int32.MinValue + 2, -2)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 2, -17)]
		[Row(Int32.MinValue + 2, -123)]
		[Row(-17, 0)]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		[Row(-17, -1)]
		[Row(-17, -2)]
		[Row(-17, Int32.MinValue + 2)]
		[Row(-17, -17)]
		[Row(-17, -123)]
		[Row(-123, 0)]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		[Row(-123, -1)]
		[Row(-123, -2)]
		[Row(-123, Int32.MinValue + 2)]
		[Row(-123, -17)]
		[Row(-123, -123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Sub(int a, int b)
		{
			this.arithmeticTests.Sub((a - b), a, b);
		}

		#endregion // Sub

		#region Mul

		[Row(0, 0)]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		[Row(0, -1)]
		[Row(0, -2)]
		[Row(0, Int32.MinValue + 2)]
		[Row(0, -17)]
		[Row(0, -123)]
		[Row(1, 0)]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		[Row(1, -1)]
		[Row(1, -2)]
		[Row(1, Int32.MinValue + 2)]
		[Row(1, -17)]
		[Row(1, -123)]
		[Row(2, 0)]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		[Row(2, -1)]
		[Row(2, -2)]
		[Row(2, Int32.MinValue + 2)]
		[Row(2, -17)]
		[Row(2, -123)]
		[Row(Int32.MinValue, 0)]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		[Row(Int32.MinValue, -1)]
		[Row(Int32.MinValue, -2)]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		[Row(Int32.MinValue, -17)]
		[Row(Int32.MinValue, -123)]
		[Row(Int32.MaxValue, 0)]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		[Row(Int32.MaxValue, -1)]
		[Row(Int32.MaxValue, -2)]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		[Row(Int32.MaxValue, -17)]
		[Row(Int32.MaxValue, -123)]
		[Row(Int32.MinValue + 1, 0)]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		[Row(Int32.MinValue + 1, -1)]
		[Row(Int32.MinValue + 1, -2)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 1, -17)]
		[Row(Int32.MinValue + 1, -123)]
		[Row(Int32.MaxValue - 1, 0)]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		[Row(Int32.MaxValue - 1, -1)]
		[Row(Int32.MaxValue - 1, -2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		[Row(Int32.MaxValue - 1, -17)]
		[Row(Int32.MaxValue - 1, -123)]
		[Row(17, 0)]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		[Row(17, -1)]
		[Row(17, -2)]
		[Row(17, Int32.MinValue + 2)]
		[Row(17, -17)]
		[Row(17, -123)]
		[Row(123, 0)]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		[Row(123, -1)]
		[Row(123, -2)]
		[Row(123, Int32.MinValue + 2)]
		[Row(123, -17)]
		[Row(123, -123)]
		[Row(-1, 0)]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		[Row(-1, -1)]
		[Row(-1, -2)]
		[Row(-1, Int32.MinValue + 2)]
		[Row(-1, -17)]
		[Row(-1, -123)]
		[Row(-2, 0)]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		[Row(-2, -1)]
		[Row(-2, -2)]
		[Row(-2, Int32.MinValue + 2)]
		[Row(-2, -17)]
		[Row(-2, -123)]
		[Row(Int32.MinValue + 2, 0)]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		[Row(Int32.MinValue + 2, -1)]
		[Row(Int32.MinValue + 2, -2)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 2, -17)]
		[Row(Int32.MinValue + 2, -123)]
		[Row(-17, 0)]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		[Row(-17, -1)]
		[Row(-17, -2)]
		[Row(-17, Int32.MinValue + 2)]
		[Row(-17, -17)]
		[Row(-17, -123)]
		[Row(-123, 0)]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		[Row(-123, -1)]
		[Row(-123, -2)]
		[Row(-123, Int32.MinValue + 2)]
		[Row(-123, -17)]
		[Row(-123, -123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Mul(int a, int b)
		{
			this.arithmeticTests.Mul((a * b), a, b);
		}

		#endregion // Mul

		#region Div

		[Row(0, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		[Row(0, -1)]
		[Row(0, -2)]
		[Row(0, Int32.MinValue + 2)]
		[Row(0, -17)]
		[Row(0, -123)]
		[Row(1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		[Row(1, -1)]
		[Row(1, -2)]
		[Row(1, Int32.MinValue + 2)]
		[Row(1, -17)]
		[Row(1, -123)]
		[Row(2, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		[Row(2, -1)]
		[Row(2, -2)]
		[Row(2, Int32.MinValue + 2)]
		[Row(2, -17)]
		[Row(2, -123)]
		[Row(Int32.MinValue, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		[Row(Int32.MinValue, -1, ExpectedException = typeof(OverflowException))] // Note: Manual edit to add overflow exception
		[Row(Int32.MinValue, -2)]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		[Row(Int32.MinValue, -17)]
		[Row(Int32.MinValue, -123)]
		[Row(Int32.MaxValue, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		[Row(Int32.MaxValue, -1)]
		[Row(Int32.MaxValue, -2)]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		[Row(Int32.MaxValue, -17)]
		[Row(Int32.MaxValue, -123)]
		[Row(Int32.MinValue + 1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		[Row(Int32.MinValue + 1, -1)]
		[Row(Int32.MinValue + 1, -2)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 1, -17)]
		[Row(Int32.MinValue + 1, -123)]
		[Row(Int32.MaxValue - 1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		[Row(Int32.MaxValue - 1, -1)]
		[Row(Int32.MaxValue - 1, -2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		[Row(Int32.MaxValue - 1, -17)]
		[Row(Int32.MaxValue - 1, -123)]
		[Row(17, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		[Row(17, -1)]
		[Row(17, -2)]
		[Row(17, Int32.MinValue + 2)]
		[Row(17, -17)]
		[Row(17, -123)]
		[Row(123, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		[Row(123, -1)]
		[Row(123, -2)]
		[Row(123, Int32.MinValue + 2)]
		[Row(123, -17)]
		[Row(123, -123)]
		[Row(-1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		[Row(-1, -1)]
		[Row(-1, -2)]
		[Row(-1, Int32.MinValue + 2)]
		[Row(-1, -17)]
		[Row(-1, -123)]
		[Row(-2, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		[Row(-2, -1)]
		[Row(-2, -2)]
		[Row(-2, Int32.MinValue + 2)]
		[Row(-2, -17)]
		[Row(-2, -123)]
		[Row(Int32.MinValue + 2, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		[Row(Int32.MinValue + 2, -1)]
		[Row(Int32.MinValue + 2, -2)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 2, -17)]
		[Row(Int32.MinValue + 2, -123)]
		[Row(-17, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		[Row(-17, -1)]
		[Row(-17, -2)]
		[Row(-17, Int32.MinValue + 2)]
		[Row(-17, -17)]
		[Row(-17, -123)]
		[Row(-123, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		[Row(-123, -1)]
		[Row(-123, -2)]
		[Row(-123, Int32.MinValue + 2)]
		[Row(-123, -17)]
		[Row(-123, -123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Div(int a, int b)
		{
			this.arithmeticTests.Div((a / b), a, b);
		}

		#endregion // Div

		#region Rem

		[Row(0, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		//[Row(0, -1, ExpectedException = typeof(OverflowException))]
		//[Row(0, -2, ExpectedException = typeof(OverflowException))]
		[Row(0, Int32.MinValue + 2)]
		//[Row(0, -17, ExpectedException = typeof(OverflowException))]
		//[Row(0, -123, ExpectedException = typeof(OverflowException))]
		[Row(1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		//[Row(1, -1, ExpectedException = typeof(OverflowException))]
		//[Row(1, -2, ExpectedException = typeof(OverflowException))]
		[Row(1, Int32.MinValue + 2)]
		//[Row(1, -17, ExpectedException = typeof(OverflowException))]
		//[Row(1, -123, ExpectedException = typeof(OverflowException))]
		[Row(2, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		//[Row(2, -1, ExpectedException = typeof(OverflowException))]
		//[Row(2, -2, ExpectedException = typeof(OverflowException))]
		[Row(2, Int32.MinValue + 2)]
		//[Row(2, -17, ExpectedException = typeof(OverflowException))]
		//[Row(2, -123, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MinValue, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		//[Row(Int32.MinValue, -1, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MinValue, -2, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		//[Row(Int32.MinValue, -17, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MinValue, -123, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MaxValue, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		//[Row(Int32.MaxValue, -1, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MaxValue, -2, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		//[Row(Int32.MaxValue, -17, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MaxValue, -123, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MinValue + 1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		//[Row(Int32.MinValue + 1, -1, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MinValue + 1, -2, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		//[Row(Int32.MinValue + 1, -17, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MinValue + 1, -123, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MaxValue - 1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		//[Row(Int32.MaxValue - 1, -1, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MaxValue - 1, -2, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		//[Row(Int32.MaxValue - 1, -17, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MaxValue - 1, -123, ExpectedException = typeof(OverflowException))]
		[Row(17, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		//[Row(17, -1, ExpectedException = typeof(OverflowException))]
		//[Row(17, -2, ExpectedException = typeof(OverflowException))]
		[Row(17, Int32.MinValue + 2)]
		//[Row(17, -17, ExpectedException = typeof(OverflowException))]
		//[Row(17, -123, ExpectedException = typeof(OverflowException))]
		[Row(123, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		//[Row(123, -1, ExpectedException = typeof(OverflowException))]
		//[Row(123, -2, ExpectedException = typeof(OverflowException))]
		[Row(123, Int32.MinValue + 2)]
		//[Row(123, -17, ExpectedException = typeof(OverflowException))]
		//[Row(123, -123, ExpectedException = typeof(OverflowException))]
		[Row(-1, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		//[Row(-1, -1, ExpectedException = typeof(OverflowException))]
		//[Row(-1, -2, ExpectedException = typeof(OverflowException))]
		[Row(-1, Int32.MinValue + 2)]
		//[Row(-1, -17, ExpectedException = typeof(OverflowException))]
		//[Row(-1, -123, ExpectedException = typeof(OverflowException))]
		[Row(-2, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		//[Row(-2, -1, ExpectedException = typeof(OverflowException))]
		//[Row(-2, -2, ExpectedException = typeof(OverflowException))]
		[Row(-2, Int32.MinValue + 2)]
		//[Row(-2, -17, ExpectedException = typeof(OverflowException))]
		//[Row(-2, -123, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MinValue + 2, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		//[Row(Int32.MinValue + 2, -1, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MinValue + 2, -2, ExpectedException = typeof(OverflowException))]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		//[Row(Int32.MinValue + 2, -17, ExpectedException = typeof(OverflowException))]
		//[Row(Int32.MinValue + 2, -123, ExpectedException = typeof(OverflowException))]
		[Row(-17, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		//[Row(-17, -1, ExpectedException = typeof(OverflowException))]
		//[Row(-17, -2, ExpectedException = typeof(OverflowException))]
		[Row(-17, Int32.MinValue + 2)]
		//[Row(-17, -17, ExpectedException = typeof(OverflowException))]
		//[Row(-17, -123, ExpectedException = typeof(OverflowException))]
		[Row(-123, 0, ExpectedException = typeof(DivideByZeroException))]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		//[Row(-123, -1, ExpectedException = typeof(OverflowException))]
		//[Row(-123, -2, ExpectedException = typeof(OverflowException))]
		[Row(-123, Int32.MinValue + 2)]
		//[Row(-123, -17, ExpectedException = typeof(OverflowException))]
		//[Row(-123, -123, ExpectedException = typeof(OverflowException))]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Rem(int a, int b)
		{
			this.arithmeticTests.Rem((a % b), a, b);
		}

		#endregion // Rem

		#region Neg

		[Row(0)]
		[Row(1)]
		[Row(2)]
		[Row(Int32.MinValue)]
		[Row(Int32.MaxValue)]
		[Row(Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1)]
		[Row(17)]
		[Row(123)]
		[Row(-1)]
		[Row(-2)]
		[Row(Int32.MinValue + 2)]
		[Row(-17)]
		[Row(-123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Neg(int first)
		{
			this.arithmeticTests.Neg(-first, first);
		}

		#endregion // Neg

		#region Ret

		[Row(0)]
		[Row(1)]
		[Row(2)]
		[Row(Int32.MinValue)]
		[Row(Int32.MaxValue)]
		[Row(Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1)]
		[Row(17)]
		[Row(123)]
		[Row(-1)]
		[Row(-2)]
		[Row(Int32.MinValue + 2)]
		[Row(-17)]
		[Row(-123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Ret(int value)
		{
			this.arithmeticTests.Ret(value);
		}

		#endregion // Ret

		#region And

		[Row(0, 0)]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		[Row(0, -1)]
		[Row(0, -2)]
		[Row(0, Int32.MinValue + 2)]
		[Row(0, -17)]
		[Row(0, -123)]
		[Row(1, 0)]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		[Row(1, -1)]
		[Row(1, -2)]
		[Row(1, Int32.MinValue + 2)]
		[Row(1, -17)]
		[Row(1, -123)]
		[Row(2, 0)]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		[Row(2, -1)]
		[Row(2, -2)]
		[Row(2, Int32.MinValue + 2)]
		[Row(2, -17)]
		[Row(2, -123)]
		[Row(Int32.MinValue, 0)]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		[Row(Int32.MinValue, -1)]
		[Row(Int32.MinValue, -2)]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		[Row(Int32.MinValue, -17)]
		[Row(Int32.MinValue, -123)]
		[Row(Int32.MaxValue, 0)]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		[Row(Int32.MaxValue, -1)]
		[Row(Int32.MaxValue, -2)]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		[Row(Int32.MaxValue, -17)]
		[Row(Int32.MaxValue, -123)]
		[Row(Int32.MinValue + 1, 0)]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		[Row(Int32.MinValue + 1, -1)]
		[Row(Int32.MinValue + 1, -2)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 1, -17)]
		[Row(Int32.MinValue + 1, -123)]
		[Row(Int32.MaxValue - 1, 0)]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		[Row(Int32.MaxValue - 1, -1)]
		[Row(Int32.MaxValue - 1, -2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		[Row(Int32.MaxValue - 1, -17)]
		[Row(Int32.MaxValue - 1, -123)]
		[Row(17, 0)]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		[Row(17, -1)]
		[Row(17, -2)]
		[Row(17, Int32.MinValue + 2)]
		[Row(17, -17)]
		[Row(17, -123)]
		[Row(123, 0)]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		[Row(123, -1)]
		[Row(123, -2)]
		[Row(123, Int32.MinValue + 2)]
		[Row(123, -17)]
		[Row(123, -123)]
		[Row(-1, 0)]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		[Row(-1, -1)]
		[Row(-1, -2)]
		[Row(-1, Int32.MinValue + 2)]
		[Row(-1, -17)]
		[Row(-1, -123)]
		[Row(-2, 0)]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		[Row(-2, -1)]
		[Row(-2, -2)]
		[Row(-2, Int32.MinValue + 2)]
		[Row(-2, -17)]
		[Row(-2, -123)]
		[Row(Int32.MinValue + 2, 0)]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		[Row(Int32.MinValue + 2, -1)]
		[Row(Int32.MinValue + 2, -2)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 2, -17)]
		[Row(Int32.MinValue + 2, -123)]
		[Row(-17, 0)]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		[Row(-17, -1)]
		[Row(-17, -2)]
		[Row(-17, Int32.MinValue + 2)]
		[Row(-17, -17)]
		[Row(-17, -123)]
		[Row(-123, 0)]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		[Row(-123, -1)]
		[Row(-123, -2)]
		[Row(-123, Int32.MinValue + 2)]
		[Row(-123, -17)]
		[Row(-123, -123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void And(int first, int second)
		{
			this.logicTests.And((first & second), first, second);
		}

		#endregion // And

		#region Or

		[Row(0, 0)]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		[Row(0, -1)]
		[Row(0, -2)]
		[Row(0, Int32.MinValue + 2)]
		[Row(0, -17)]
		[Row(0, -123)]
		[Row(1, 0)]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		[Row(1, -1)]
		[Row(1, -2)]
		[Row(1, Int32.MinValue + 2)]
		[Row(1, -17)]
		[Row(1, -123)]
		[Row(2, 0)]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		[Row(2, -1)]
		[Row(2, -2)]
		[Row(2, Int32.MinValue + 2)]
		[Row(2, -17)]
		[Row(2, -123)]
		[Row(Int32.MinValue, 0)]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		[Row(Int32.MinValue, -1)]
		[Row(Int32.MinValue, -2)]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		[Row(Int32.MinValue, -17)]
		[Row(Int32.MinValue, -123)]
		[Row(Int32.MaxValue, 0)]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		[Row(Int32.MaxValue, -1)]
		[Row(Int32.MaxValue, -2)]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		[Row(Int32.MaxValue, -17)]
		[Row(Int32.MaxValue, -123)]
		[Row(Int32.MinValue + 1, 0)]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		[Row(Int32.MinValue + 1, -1)]
		[Row(Int32.MinValue + 1, -2)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 1, -17)]
		[Row(Int32.MinValue + 1, -123)]
		[Row(Int32.MaxValue - 1, 0)]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		[Row(Int32.MaxValue - 1, -1)]
		[Row(Int32.MaxValue - 1, -2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		[Row(Int32.MaxValue - 1, -17)]
		[Row(Int32.MaxValue - 1, -123)]
		[Row(17, 0)]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		[Row(17, -1)]
		[Row(17, -2)]
		[Row(17, Int32.MinValue + 2)]
		[Row(17, -17)]
		[Row(17, -123)]
		[Row(123, 0)]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		[Row(123, -1)]
		[Row(123, -2)]
		[Row(123, Int32.MinValue + 2)]
		[Row(123, -17)]
		[Row(123, -123)]
		[Row(-1, 0)]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		[Row(-1, -1)]
		[Row(-1, -2)]
		[Row(-1, Int32.MinValue + 2)]
		[Row(-1, -17)]
		[Row(-1, -123)]
		[Row(-2, 0)]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		[Row(-2, -1)]
		[Row(-2, -2)]
		[Row(-2, Int32.MinValue + 2)]
		[Row(-2, -17)]
		[Row(-2, -123)]
		[Row(Int32.MinValue + 2, 0)]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		[Row(Int32.MinValue + 2, -1)]
		[Row(Int32.MinValue + 2, -2)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 2, -17)]
		[Row(Int32.MinValue + 2, -123)]
		[Row(-17, 0)]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		[Row(-17, -1)]
		[Row(-17, -2)]
		[Row(-17, Int32.MinValue + 2)]
		[Row(-17, -17)]
		[Row(-17, -123)]
		[Row(-123, 0)]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		[Row(-123, -1)]
		[Row(-123, -2)]
		[Row(-123, Int32.MinValue + 2)]
		[Row(-123, -17)]
		[Row(-123, -123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Or(int first, int second)
		{
			this.logicTests.Or((first | second), first, second);
		}

		#endregion // Or

		#region Xor

		[Row(0, 0)]
		[Row(0, 1)]
		[Row(0, 2)]
		[Row(0, Int32.MinValue)]
		[Row(0, Int32.MaxValue)]
		[Row(0, Int32.MinValue + 1)]
		[Row(0, Int32.MaxValue - 1)]
		[Row(0, 17)]
		[Row(0, 123)]
		[Row(0, -1)]
		[Row(0, -2)]
		[Row(0, Int32.MinValue + 2)]
		[Row(0, -17)]
		[Row(0, -123)]
		[Row(1, 0)]
		[Row(1, 1)]
		[Row(1, 2)]
		[Row(1, Int32.MinValue)]
		[Row(1, Int32.MaxValue)]
		[Row(1, Int32.MinValue + 1)]
		[Row(1, Int32.MaxValue - 1)]
		[Row(1, 17)]
		[Row(1, 123)]
		[Row(1, -1)]
		[Row(1, -2)]
		[Row(1, Int32.MinValue + 2)]
		[Row(1, -17)]
		[Row(1, -123)]
		[Row(2, 0)]
		[Row(2, 1)]
		[Row(2, 2)]
		[Row(2, Int32.MinValue)]
		[Row(2, Int32.MaxValue)]
		[Row(2, Int32.MinValue + 1)]
		[Row(2, Int32.MaxValue - 1)]
		[Row(2, 17)]
		[Row(2, 123)]
		[Row(2, -1)]
		[Row(2, -2)]
		[Row(2, Int32.MinValue + 2)]
		[Row(2, -17)]
		[Row(2, -123)]
		[Row(Int32.MinValue, 0)]
		[Row(Int32.MinValue, 1)]
		[Row(Int32.MinValue, 2)]
		[Row(Int32.MinValue, Int32.MinValue)]
		[Row(Int32.MinValue, Int32.MaxValue)]
		[Row(Int32.MinValue, Int32.MinValue + 1)]
		[Row(Int32.MinValue, Int32.MaxValue - 1)]
		[Row(Int32.MinValue, 17)]
		[Row(Int32.MinValue, 123)]
		[Row(Int32.MinValue, -1)]
		[Row(Int32.MinValue, -2)]
		[Row(Int32.MinValue, Int32.MinValue + 2)]
		[Row(Int32.MinValue, -17)]
		[Row(Int32.MinValue, -123)]
		[Row(Int32.MaxValue, 0)]
		[Row(Int32.MaxValue, 1)]
		[Row(Int32.MaxValue, 2)]
		[Row(Int32.MaxValue, Int32.MinValue)]
		[Row(Int32.MaxValue, Int32.MaxValue)]
		[Row(Int32.MaxValue, Int32.MinValue + 1)]
		[Row(Int32.MaxValue, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue, 17)]
		[Row(Int32.MaxValue, 123)]
		[Row(Int32.MaxValue, -1)]
		[Row(Int32.MaxValue, -2)]
		[Row(Int32.MaxValue, Int32.MinValue + 2)]
		[Row(Int32.MaxValue, -17)]
		[Row(Int32.MaxValue, -123)]
		[Row(Int32.MinValue + 1, 0)]
		[Row(Int32.MinValue + 1, 1)]
		[Row(Int32.MinValue + 1, 2)]
		[Row(Int32.MinValue + 1, Int32.MinValue)]
		[Row(Int32.MinValue + 1, Int32.MaxValue)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 1, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 1, 17)]
		[Row(Int32.MinValue + 1, 123)]
		[Row(Int32.MinValue + 1, -1)]
		[Row(Int32.MinValue + 1, -2)]
		[Row(Int32.MinValue + 1, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 1, -17)]
		[Row(Int32.MinValue + 1, -123)]
		[Row(Int32.MaxValue - 1, 0)]
		[Row(Int32.MaxValue - 1, 1)]
		[Row(Int32.MaxValue - 1, 2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1, Int32.MaxValue - 1)]
		[Row(Int32.MaxValue - 1, 17)]
		[Row(Int32.MaxValue - 1, 123)]
		[Row(Int32.MaxValue - 1, -1)]
		[Row(Int32.MaxValue - 1, -2)]
		[Row(Int32.MaxValue - 1, Int32.MinValue + 2)]
		[Row(Int32.MaxValue - 1, -17)]
		[Row(Int32.MaxValue - 1, -123)]
		[Row(17, 0)]
		[Row(17, 1)]
		[Row(17, 2)]
		[Row(17, Int32.MinValue)]
		[Row(17, Int32.MaxValue)]
		[Row(17, Int32.MinValue + 1)]
		[Row(17, Int32.MaxValue - 1)]
		[Row(17, 17)]
		[Row(17, 123)]
		[Row(17, -1)]
		[Row(17, -2)]
		[Row(17, Int32.MinValue + 2)]
		[Row(17, -17)]
		[Row(17, -123)]
		[Row(123, 0)]
		[Row(123, 1)]
		[Row(123, 2)]
		[Row(123, Int32.MinValue)]
		[Row(123, Int32.MaxValue)]
		[Row(123, Int32.MinValue + 1)]
		[Row(123, Int32.MaxValue - 1)]
		[Row(123, 17)]
		[Row(123, 123)]
		[Row(123, -1)]
		[Row(123, -2)]
		[Row(123, Int32.MinValue + 2)]
		[Row(123, -17)]
		[Row(123, -123)]
		[Row(-1, 0)]
		[Row(-1, 1)]
		[Row(-1, 2)]
		[Row(-1, Int32.MinValue)]
		[Row(-1, Int32.MaxValue)]
		[Row(-1, Int32.MinValue + 1)]
		[Row(-1, Int32.MaxValue - 1)]
		[Row(-1, 17)]
		[Row(-1, 123)]
		[Row(-1, -1)]
		[Row(-1, -2)]
		[Row(-1, Int32.MinValue + 2)]
		[Row(-1, -17)]
		[Row(-1, -123)]
		[Row(-2, 0)]
		[Row(-2, 1)]
		[Row(-2, 2)]
		[Row(-2, Int32.MinValue)]
		[Row(-2, Int32.MaxValue)]
		[Row(-2, Int32.MinValue + 1)]
		[Row(-2, Int32.MaxValue - 1)]
		[Row(-2, 17)]
		[Row(-2, 123)]
		[Row(-2, -1)]
		[Row(-2, -2)]
		[Row(-2, Int32.MinValue + 2)]
		[Row(-2, -17)]
		[Row(-2, -123)]
		[Row(Int32.MinValue + 2, 0)]
		[Row(Int32.MinValue + 2, 1)]
		[Row(Int32.MinValue + 2, 2)]
		[Row(Int32.MinValue + 2, Int32.MinValue)]
		[Row(Int32.MinValue + 2, Int32.MaxValue)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 1)]
		[Row(Int32.MinValue + 2, Int32.MaxValue - 1)]
		[Row(Int32.MinValue + 2, 17)]
		[Row(Int32.MinValue + 2, 123)]
		[Row(Int32.MinValue + 2, -1)]
		[Row(Int32.MinValue + 2, -2)]
		[Row(Int32.MinValue + 2, Int32.MinValue + 2)]
		[Row(Int32.MinValue + 2, -17)]
		[Row(Int32.MinValue + 2, -123)]
		[Row(-17, 0)]
		[Row(-17, 1)]
		[Row(-17, 2)]
		[Row(-17, Int32.MinValue)]
		[Row(-17, Int32.MaxValue)]
		[Row(-17, Int32.MinValue + 1)]
		[Row(-17, Int32.MaxValue - 1)]
		[Row(-17, 17)]
		[Row(-17, 123)]
		[Row(-17, -1)]
		[Row(-17, -2)]
		[Row(-17, Int32.MinValue + 2)]
		[Row(-17, -17)]
		[Row(-17, -123)]
		[Row(-123, 0)]
		[Row(-123, 1)]
		[Row(-123, 2)]
		[Row(-123, Int32.MinValue)]
		[Row(-123, Int32.MaxValue)]
		[Row(-123, Int32.MinValue + 1)]
		[Row(-123, Int32.MaxValue - 1)]
		[Row(-123, 17)]
		[Row(-123, 123)]
		[Row(-123, -1)]
		[Row(-123, -2)]
		[Row(-123, Int32.MinValue + 2)]
		[Row(-123, -17)]
		[Row(-123, -123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Xor(int first, int second)
		{
			this.logicTests.Xor((first ^ second), first, second);
		}

		#endregion // Xor

		#region Comp

		[Row(0)]
		[Row(1)]
		[Row(2)]
		[Row(Int32.MinValue)]
		[Row(Int32.MaxValue)]
		[Row(Int32.MinValue + 1)]
		[Row(Int32.MaxValue - 1)]
		[Row(17)]
		[Row(123)]
		[Row(-1)]
		[Row(-2)]
		[Row(Int32.MinValue + 2)]
		[Row(-17)]
		[Row(-123)]
		[Test, Author("tgiphil", "phil@thinkedge.com")]
		public void Comp(int first)
		{
			this.logicTests.Comp(~first, first);
		}

		#endregion // Comp

        #region Ceq

        [Row(true, 0, 0)]
        [Row(false, 0, 1)]
        [Row(true, 1, 1)]
        [Row(false, 1, 0)]
        [Row(true, int.MinValue, int.MinValue)]
        [Row(true, int.MaxValue, int.MaxValue)]
        [Row(false, int.MinValue, int.MaxValue)]
        [Test, Author(@"Michael Fröhlich, sharpos@michaelruck.de")]
        public void Ceq(bool expectedValue, int first, int second)
        {
            this.comparisonTests.Ceq(expectedValue, first, second);
        }

        #endregion // Ceq

        #region Newarr

        [Test, Author(@"Michael Fröhlich, sharpos@michaelruck.de")]
        public void Newarr()
        {
            this.arrayTests.Newarr();
        }

        #endregion // Newarr

        #region Ldlen

        [Row(0)]
        [Row(1)]
        [Row(10)]
        [Test, Author(@"Michael Fröhlich, sharpos@michaelruck.de")]
        public void Ldlen(int length)
        {
            this.arrayTests.Ldlen(length);
        }

        #endregion // Ldlen

        #region Stelem

        [Row(0, Int32.MinValue)]
        [Row(0, -1)]
        [Row(0, 0)]
        [Row(0, 1)]
        [Row(0, Int32.MaxValue)]
        [Row(3, Int32.MinValue)]
        [Row(7, -1)]
        [Row(9, 0)]
        [Row(6, 1)]
        [Row(2, Int32.MaxValue)]
        [Test, Author(@"Michael Fröhlich, sharpos@michaelruck.de")]
        public void Stelem(int index, int value)
        {
            this.arrayTests.Stelem(index, value);
        }

        #endregion // Stelem

        #region Ldelem

        [Row(0, Int32.MinValue)]
        [Row(0, -1)]
        [Row(0, 0)]
        [Row(0, 1)]
        [Row(0, Int32.MaxValue)]
        [Row(3, Int32.MinValue)]
        [Row(7, -1)]
        [Row(9, 0)]
        [Row(6, 1)]
        [Row(2, Int32.MaxValue)]
        [Test, Author(@"Michael Fröhlich, sharpos@michaelruck.de")]
        public void Ldelem(int index, int value)
        {
            this.arrayTests.Ldelem(index, value);
        }

        #endregion // Ldelem

        #region Ldelema

        [Row(0, Int32.MinValue)]
        [Row(0, -1)]
        [Row(0, 0)]
        [Row(0, 1)]
        [Row(0, Int32.MaxValue)]
        [Row(3, Int32.MinValue)]
        [Row(7, -1)]
        [Row(9, 0)]
        [Row(6, 1)]
        [Row(2, Int32.MaxValue)]
        [Test, Author(@"Michael Fröhlich, sharpos@michaelruck.de")]
        public void Ldelema(int index, int value)
        {
            this.arrayTests.Ldelema(index, value);
        }

        #endregion // Ldelema
    }
}
