- Branch instructions should have binary targets, as later block reodering may break sequential block layout
	+ Store references to both true and false labels, for conditional branches
	+ Follow those labels on demand
	
- Flow the operand stack to blocks
	- Fix operand stack bug for System.Text.StringBuilder.ctor(string value, int capacity)
	- Insert SameInstruction instances to merge colliding stack locations
	- Make sure that block starts hold identical number of operands on the stack??

- Implement IR instruction expansion for some instructions:
	- newobj
	- newarr?
	- castclass
	- isinst

- Rename all load instructions
- Don't derive load instructions from Unary they're not.

- Make type resolution stack based, introduce a central type resolution service and push resolution 
  contexts on the service.







        #region Metadata decoders

        private TypeReference ReadArrayTypeSpecification(ITypeResolutionContext context, byte[] buffer, ref int index)
        {
            // Array element type
            TypeReference elementType = ReadType(context, buffer, ref index);
            // Helper arrays for sizes and bounds
            int[] sizes, lowerBounds;
            // Read the array rank
            int rank = ReadCompressedInt32(buffer, ref index);

            // Retrieve the sizes
            int numsizes = ReadCompressedInt32(buffer, ref index);
            sizes = new int[numsizes];
            for (int i = 0; i < numsizes; i++)
                sizes[i] = ReadCompressedInt32(buffer, ref index);

            // Load the lower boundaries
            int numlobounds = ReadCompressedInt32(buffer, ref index);
            lowerBounds = new int[numlobounds];
            for (int i = 0; i < numlobounds; i++)
                lowerBounds[i] = ReadCompressedInt32(buffer, ref index);

            // Create the array type specification
            return new ArrayTypeSpecification(elementType, rank, sizes, lowerBounds);
        }

        private TypeReference ReadVectorSpecification(ITypeResolutionContext context, byte[] buffer, ref int index)
        {
            TypeReference elementType = ReadType(context, buffer, ref index);
            return new ArrayTypeSpecification(elementType);
        }

        private TypeReference ReadPointerTypeSpecification(ITypeResolutionContext context, byte[] buffer, ref int index)
        {
            TypeReference elementType = ReadType(context, buffer, ref index);
            return new PointerTypeSpecification(elementType);
        }

        private TypeReference ReadGenericTypeSpecification(ITypeResolutionContext context, byte[] buffer, ref int index)
        {
            TypeReference elementType = ReadType(context, buffer, ref index);
            GenericTypeSpecification result = new GenericTypeSpecification(elementType);
            int genArgCount = ReadCompressedInt32(buffer, ref index);
            TypeReference[] genArgs = new TypeReference[genArgCount];
            for (int i = 0; i < genArgCount; i++)
                genArgs[i] = ReadType(context, buffer, ref index);
            result.GenericArguments = genArgs;
            return result;
        }

        private TypeReference ReadReferenceTypeSpecification(ITypeResolutionContext context, byte[] buffer, ref int index)
        {
            TypeReference elementType = ReadType(context, buffer, ref index);
            return new ReferenceTypeSpecification(elementType);
        }

        private TypeReference ReadType(ITypeResolutionContext context, byte[] buffer, ref int index)
        {
            TypeReference result = null;
            CilElementType cet = (CilElementType)buffer[index++];

            switch (cet)
            {
                case CilElementType.Void: 
                    result = NativeTypeReference.Void; 
                    break;

                case CilElementType.Boolean: 
                    result = NativeTypeReference.Boolean; 
                    break;

                case CilElementType.Char: 
                    result = NativeTypeReference.Char; 
                    break;

                case CilElementType.I: 
                    result = NativeTypeReference.NativeInt; 
                    break;

                case CilElementType.U: 
                    result = NativeTypeReference.NativeInt; 
                    break;

                case CilElementType.I1: 
                    result = NativeTypeReference.SByte; 
                    break;

                case CilElementType.U1: 
                    result = NativeTypeReference.Byte; 
                    break;

                case CilElementType.I2: 
                    result = NativeTypeReference.Int16; 
                    break;

                case CilElementType.U2: 
                    result = NativeTypeReference.UInt16; 
                    break;

                case CilElementType.I4: 
                    result = NativeTypeReference.Int32; 
                    break;

                case CilElementType.U4: 
                    result = NativeTypeReference.UInt32; 
                    break;

                case CilElementType.I8: 
                    result = NativeTypeReference.Int64; 
                    break;

                case CilElementType.U8: 
                    result = NativeTypeReference.UInt64; 
                    break;

                case CilElementType.R4: 
                    result = NativeTypeReference.Single; 
                    break;

                case CilElementType.R8: 
                    result = NativeTypeReference.Double; 
                    break;

                case CilElementType.String: 
                    result = NativeTypeReference.String; 
                    break;

                case CilElementType.Object: 
                    result = TypeReference.FromName(context.MetadataProvider, @"System", @"Object"); 
                    break;

                case CilElementType.TypedByRef:
                    result = TypeReference.FromName(context.MetadataProvider, @"System", @"TypedReference"); 
                    break;

                case CilElementType.Array:
                    result = ReadArrayTypeSpecification(context, buffer, ref index);
                    break;

                case CilElementType.Class:
                    result = ReadTypeDefOrRefEncoded(context.MetadataProvider, buffer, ref index);
                    break;

                case CilElementType.FunctionPtr:
                    throw new NotImplementedException();

                case CilElementType.GenericInst:
                    result = ReadGenericTypeSpecification(context, buffer, ref index);
                    break;

                case CilElementType.MVar:
                    Debug.Assert(false);
                    break;

                case CilElementType.Var:
                    Debug.Assert(false);
                    break;

                case CilElementType.Ptr:
                    result = ReadPointerTypeSpecification(context, buffer, ref index);
                    break;

                case CilElementType.ByRef:
                    result = ReadReferenceTypeSpecification(context, buffer, ref index);
                    break;

                case CilElementType.SZArray:
                    result = ReadVectorSpecification(context, buffer, ref index);
                    break;

                case CilElementType.ValueType:
                    result = ReadTypeDefOrRefEncoded(context.MetadataProvider, buffer, ref index);
                    break;
            }

            return result;
        }

        private static readonly TokenTypes[] _typeDefOrRefEncodedTables = new TokenTypes[] { TokenTypes.TypeDef, TokenTypes.TypeRef, TokenTypes.TypeSpec };
        private TypeReference ReadTypeDefOrRefEncoded(IMetadataProvider provider, byte[] buffer, ref int index)
        {
            int value = ReadCompressedInt32(buffer, ref index);
            Debug.Assert(0 != (value & 0xFFFFFFFC), @"Invalid TypeDefOrRefEncoded index value.");
            TokenTypes token = (TokenTypes)((value >> 2) | (int)_typeDefOrRefEncodedTables[value & 0x03]);

            // FIXME: This needs some cleanup
            if (TokenTypes.TypeRef == (token & TokenTypes.TableMask))
                return provider.GetRow<TypeReference>(provider, token);
            else
                return provider.GetRow<TypeDefinition>(provider, token);
        }

        private int ReadCompressedInt32(byte[] buffer, ref int index)
        {
            if (null == buffer)
                throw new ArgumentNullException(@"buffer");
            if (0 > index || index >= buffer.Length)
                throw new ArgumentOutOfRangeException(@"startIndex");

            int result = 0;
            if (0xC0 == (0xE0 & buffer[index]))
            {
                if (index + 3 >= buffer.Length)
                    throw new ArgumentOutOfRangeException(@"startIndex");

                result = ((buffer[index] & 0x1F) << 24) | (buffer[index + 1] << 16) | (buffer[index + 2] << 8) | (buffer[index + 3]);
                index += 4;
            }
            else if (0x80 == (0xC0 & buffer[index]))
            {
                if (index + 1 >= buffer.Length)
                    throw new ArgumentOutOfRangeException(@"startIndex");

                result = ((buffer[index] & 0x3F) << 8) | (buffer[index + 1]);
                index += 2;
            }
            else
            {
                Debug.Assert(0x00 == (0x80 & buffer[index]));
                result = buffer[index++];
            }
            return result;
        }


        #endregion // Metadata decoders

