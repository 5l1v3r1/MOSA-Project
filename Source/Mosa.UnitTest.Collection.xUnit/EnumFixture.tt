<#@ include file="../TemplateLibrary.txt" #>
using Xunit;

namespace Mosa.UnitTest.Collection.xUnit
{
	public class Fixture_Enum : TestFixture
	{
<#
	List<string> members = new List<string>() {"Conversion", "PlusOne1", "PlusOne2", "MinusOne1", "MinusOne2",
											   "Shl", "Shr", "Mul2", "Div2", "Rem2", "AssignPlusOne", "AssignMinusOne",
											   "Preincrement", "Predecrement", "Postincrement", "Postdecrement",
											   "And", "Or", "XOr" };
	foreach (KeyValuePair<string, string> comparison in Comparisons)
	{
		members.Add(comparison.Value + "1");
		members.Add(comparison.Value + "2");
		members.Add(comparison.Value + "3");
	}

	foreach (bool isSigned in new bool[2] {false, true})
	{
		foreach (KeyValuePair<string, string> numberT in isSigned ? NegativeIntegers : PositiveIntegers)
		{
			bool comparison = false;
			string valueType = numberT.Key;

			foreach(string member in members)
			{
				if (member == "Equal1") 
					comparison = true;

				string comparisionType = comparison ? "bool" : valueType;
			#>

		[Fact]
		public void Enum<#= numberT.Value #>_<#= member #>()
		{
			Assert.Equal(Enum<#= numberT.Value #>.Positive<#= member #>(), Run<<#= comparisionType #>>("Mosa.UnitTest.Collection.Enum<#= numberT.Value #>.Positive<#= member #>"));
<#				if (isSigned) { #>
			Assert.Equal(Enum<#= numberT.Value #>.Negative<#= member #>(), Run<<#= comparisionType #>>("Mosa.UnitTest.Collection.Enum<#= numberT.Value #>.Negative<#= member #>"));
<#				} #>
		}
<#
			}
		}
	}
#>	}
}
