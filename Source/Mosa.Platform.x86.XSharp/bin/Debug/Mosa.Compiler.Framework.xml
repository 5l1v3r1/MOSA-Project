<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mosa.Compiler.Framework</name>
    </assembly>
    <members>
        <member name="T:Mosa.Compiler.Framework.AssemblyMemberCompilationSchedulerStage">
            <summary>
            Schedules all types of an assembly for compilation.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.BaseAssemblyCompilerStage">
            <summary>
            Basic base class for assembly compiler pipeline stages
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseAssemblyCompilerStage.architecture">
            <summary>
            Holds the Architecture during compilation.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseAssemblyCompilerStage.compiler">
            <summary>
            Holds the assembly Compiler.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseAssemblyCompilerStage.typeSystem">
            <summary>
            Holds the current type system during compilation.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseAssemblyCompilerStage.typeLayout">
            <summary>
            Holds the current type layout during compilation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseAssemblyCompilerStage.RetrieveAssemblyLinkerFromCompiler">
            <summary>
            Retrieves the assembly linker from compiler.
            </summary>
            <returns>The retrieved assembly linker.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseAssemblyCompilerStage.Name">
            <summary>
            Retrieves the name of the compilation stage.
            </summary>
            <value>The name of the compilation stage.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.IAssemblyCompilerStage">
            <summary>
            This interface represents a stage of compilation of an assembly.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IPipelineStage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IPipelineStage.Name">
            <summary>
            Retrieves the name of the compilation stage.
            </summary>
            <value>The name of the compilation stage.</value>
        </member>
        <member name="M:Mosa.Compiler.Framework.IAssemblyCompilerStage.Setup(Mosa.Compiler.Framework.AssemblyCompiler)">
            <summary>
            Sets up the assembly compiler stage.
            </summary>
            <param name="compiler">
            A <see cref="T:Mosa.Compiler.Framework.AssemblyCompiler"/> using the stage.
            </param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IAssemblyCompilerStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.BaseCodeEmitter">
            <summary>
            Base code emitter.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.compiler">
            <summary>
            The compiler that is generating the code.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.codeStream">
            <summary>
            The stream used to write machine code bytes to.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.codeStreamBasePosition">
            <summary>
            The position that the code stream starts.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.labels">
            <summary>
            List of labels that were emitted.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.linker">
            <summary>
            Holds the linker used to resolve externals.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.literals">
            <summary>
            List of literal patches we need to perform.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.patches">
            <summary>
            Patches we need to perform.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeEmitter.Dispose">
            <summary>
            Completes emitting the code of a method.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeEmitter.Initialize(Mosa.Compiler.Framework.IMethodCompiler,System.IO.Stream,Mosa.Compiler.Linker.IAssemblyLinker)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.BaseCodeEmitter"/>.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="codeStream">The stream the machine code is written to.</param>
            <param name="linker">The linker used to resolve external addresses.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeEmitter.Label(System.Int32)">
            <summary>
            Emits a label into the code stream.
            </summary>
            <param name="label">The label name to emit.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeEmitter.GetPosition(System.Int32)">
            <summary>
            Gets the position.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseCodeEmitter.CurrentPosition">
            <summary>
            Gets the current position.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.BaseCodeEmitter.Patch">
            <summary>
            Patch
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeEmitter.Patch.#ctor(System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.BaseCodeEmitter.Patch"/> struct.
            </summary>
            <param name="label">The label.</param>
            <param name="position">The position.</param>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.Patch.Label">
            <summary>
            Patch label
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseCodeEmitter.Patch.Position">
            <summary>
            The patch's position in the stream
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeEmitter.Patch.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.BaseInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IInstruction">
            <summary>
            Interface to an instruction
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IInstruction.Visit(Mosa.Compiler.Framework.IVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IInstruction.ToString(Mosa.Compiler.Framework.Context)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="ctx">The context.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.IInstruction.FlowControl">
            <summary>
            Gets the flow control.
            </summary>
            <value>The flow control.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IInstruction.DefaultOperandCount">
            <summary>
            Gets the default operand count of the instruction
            </summary>
            <value>The operand count.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IInstruction.DefaultResultCount">
            <summary>
            Gets the default result operand count of the instruction
            </summary>
            <value>The operand result count.</value>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseInstruction._operandDefaultCount">
            <summary>
            Holds the default number of operands for this instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseInstruction._resultDefaultCount">
            <summary>
            Holds the default number of operand results for this instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.BaseInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.BaseInstruction"/> class.
            </summary>
            <param name="operandCount">The operand count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.BaseInstruction"/> class.
            </summary>
            <param name="operandCount">The operand count.</param>
            <param name="resultCount">The result count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.ToString">
            <summary>
            Returns a string representation of the context.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.ToString(Mosa.Compiler.Framework.Context)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.Visit(Mosa.Compiler.Framework.IVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.GetModifier(Mosa.Compiler.Framework.Context)">
            <summary>
            Gets the instruction modifier.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseInstruction.GetConditionString(Mosa.Compiler.Framework.IR.ConditionCode)">
            <summary>
            Gets the condition string.
            </summary>
            <param name="conditioncode">The conditioncode.</param>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseInstruction.DefaultOperandCount">
            <summary>
            Gets the default operand count of the instruction
            </summary>
            <value>The operand count.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseInstruction.DefaultResultCount">
            <summary>
            Gets the default result operand count of the instruction
            </summary>
            <value>The operand result count.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.BasicBlockBuilderStage">
            <summary>
            This compilation stage is used by method compilers after the
            IL decoding stage to build basic Blocks out of the instruction list.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.BaseMethodCompilerStage">
            <summary>
            Basic base class for method compiler pipeline stages
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.methodCompiler">
            <summary>
            Hold the method compiler
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.architecture">
            <summary>
            The architecture of the compilation process
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.instructionSet">
            <summary>
            Holds the instruction set
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.basicBlocks">
            <summary>
            List of basic blocks found during decoding
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.typeSystem">
            <summary>
            Holds the type system
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.typeModule">
            <summary>
            Holds the modules type system
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.assemblyLoader">
            <summary>
            Holds the assembly loader
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.typeLayout">
            <summary>
            Holds the type layout interface
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.callingConvention">
            <summary>
            Holds the calling convention interface
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.nativePointerSize">
            <summary>
            Holds the Native Pointer Size
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompilerStage.nativePointerAlignment">
            <summary>
            Holds the Native Pointer Alignment
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.Setup(Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Setups the specified compiler.
            </summary>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.FindBlock(System.Int32)">
            <summary>
            Gets block by label
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.CreateContext(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Creates the context.
            </summary>
            <param name="block">The block.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.CreateContext(System.Int32)">
            <summary>
            Creates the context.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.CreateBlock(System.Int32,System.Int32)">
            <summary>
            Creates the block.
            </summary>
            <param name="label">The label.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.CreateBlock(System.Int32)">
            <summary>
            Creates the block.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.ConvertCondition(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Converts the specified opcode.
            </summary>
            <param name="opcode">The opcode.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.GetUnsignedConditionCode(Mosa.Compiler.Framework.IR.ConditionCode)">
            <summary>
            Gets the unsigned condition code.
            </summary>
            <param name="conditionCode">The condition code to get an unsigned form from.</param>
            <returns>The unsigned form of the given condition code.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompilerStage.GetOppositeConditionCode(Mosa.Compiler.Framework.IR.ConditionCode)">
            <summary>
            Gets the opposite condition code.
            </summary>
            <param name="conditionCode">The condition code.</param>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompilerStage.Name">
            <summary>
            Retrieves the name of the compilation stage.
            </summary>
            <value>The name of the compilation stage.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.IMethodCompilerStage">
            <summary>
            Represents a compilation stage during compilation of the JIT or AOT compilers.
            </summary>
            <remarks>
            Compilation stages are typically realized as individual components acting on fragments
            of a .NET IL binary. The JIT compiler uses a defined subset of the AOT compilation stages
            in order to provide fast code generation. Both compilers share a single compilation model 
            consisting of a set of individual stages forming a compilation pipeline. The pipeline 
            model allows for flexible configuration of the capabilities of either compiler. Individual
            stages may represent IL decoding, machine code generation, register allocation, emitting
            machine code and finally storing it in a binary. This provides for a highly modular and
            extensible compilation model.
            <para />
            In addition to the IMethodCompilerStage interface other compilation stage specific interfaces
            must be implemented.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompilerStage.Setup(Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Setup stage specific processing on the compiler context.
            </summary>
            <param name="compiler">The compiler context to perform processing in.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompilerStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlockBuilderStage.epilogue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlockBuilderStage.prologue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicBlockBuilderStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicBlockBuilderStage.SplitIntoBlocks(System.Int32)">
            <summary>
            Finds all targets.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicBlockBuilderStage.BuildBlockLinks(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Builds the block links.
            </summary>
            <param name="block">The current block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicBlockBuilderStage.LinkBlocks(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Links the Blocks.
            </summary>
            <param name="caller">The caller.</param>
            <param name="callee">The callee.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.AddInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ArithmeticInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BinaryInstruction">
            <summary>
            Intermediate representation of an instruction, which takes two stack arguments.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BaseInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ICILInstruction">
            <summary>
            Interface to a CIL instruction
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified CIL instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.ICILInstruction.OpCode">
            <summary>
            Gets the opcode.
            </summary>
            <value>The opcode.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.ICILInstruction.PushResult">
            <summary>
            Determines if the IL decoder pushes the results of this instruction onto the IL operand stack.
            </summary>
            <value><c>true</c> if [push result]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.BaseInstruction.opcode">
            <summary>
            Holds the CIL opcode
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BaseInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BaseInstruction"/> class.
            </summary>
            <param name="opCode">The op code.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BaseInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BaseInstruction"/> class.
            </summary>
            <param name="opCode">The op code.</param>
            <param name="operandCount">The operand count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BaseInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BaseInstruction"/> class.
            </summary>
            <param name="opCode">The op code.</param>
            <param name="operandCount">The operand count.</param>
            <param name="resultCount">The result count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BaseInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BaseInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BaseInstruction.Visit(Mosa.Compiler.Framework.IVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BaseInstruction.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.ConstantOperand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.BaseInstruction.OpCode">
            <summary>
            Gets the op code.
            </summary>
            <value>The op code.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.BaseInstruction.PushResult">
            <summary>
            Determines if the IL decoder pushes the results of this instruction onto the IL operand stack.
            </summary>
            <value><c>true</c> if [push result]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BinaryInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BinaryInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
            <param name="resultCount">The result count.</param>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.ArithmeticInstruction._operandTable">
            <summary>
            Generic operand validation table. Not used for add and sub.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.ArithmeticInstruction._addTable">
            <summary>
            Operand validation table for the add instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.ArithmeticInstruction._subTable">
            <summary>
            Operand validation table for the sub instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArithmeticInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ArithmeticInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArithmeticInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.AddInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.AddInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.AddInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ArglistInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArglistInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ArglistInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArglistInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArglistInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction._operandTable">
            <summary>
            Generic operand validation table. Not used for add and sub.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction._addovfunTable">
            <summary>
            Operand validation table for the add instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction._subovfunTable">
            <summary>
            Operand validation table for the sub instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ArithmeticOverflowInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.IBranchInstruction">
            <summary>
            Base interface for CIL branch instructions.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.IBranchInstruction.IsConditional">
            <summary>
            Determines if the branch is conditional.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction"/> class.
            </summary>
            <param name="opCode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction.GetModifier(Mosa.Compiler.Framework.Context)">
            <summary>
            Gets the instruction modifier.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.BinaryBranchInstruction.IsConditional">
            <summary>
            Determines if the branch is conditional.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BinaryComparisonInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryComparisonInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BinaryComparisonInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryComparisonInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryComparisonInstruction.GetModifier(Mosa.Compiler.Framework.Context)">
            <summary>
            Gets the instruction modifier.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryComparisonInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BinaryLogicInstruction">
            <summary>
            Intermediate representation of a IL binary logic instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.BinaryLogicInstruction._opTable">
            <summary>
            Operand table according to ISO/IEC 23271:2006 (E), Partition III, 1.5, Table 5.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryLogicInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BinaryLogicInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryLogicInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BinaryLogicInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BoxingInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BoxingInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BoxingInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BoxInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.UnaryInstruction">
            <summary>
            Implements the internal representation for unary CIL instructions.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.UnaryInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.UnaryInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
            <param name="resultCount">The result count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BoxInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BoxInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BoxInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BoxInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BranchInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BranchInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BranchInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BranchInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BranchInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.BranchInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.BranchInstruction.IsConditional">
            <summary>
            Determines if the branch is conditional.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.CalliInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.InvokeInstruction">
            <summary>
            Base class for instructions, which invoke other functions.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InvokeInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.InvokeInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InvokeInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InvokeInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InvokeInstruction.DecodeInvocationTarget(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder,Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags)">
            <summary>
            Decodes the invocation target.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The IL decoder, which provides decoding functionality.</param>
            <param name="flags">Flags, which control the</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InvokeInstruction.SetInvokeTarget(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler,Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Sets the invoke target.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InvokeInstruction.IsCallTargetSupported(Mosa.Compiler.Metadata.TableType,Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags)">
            <summary>
            Determines whether [is call target supported] [the specified target type].
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="flags">The flags.</param>
            <returns>
            	<c>true</c> if [is call target supported] [the specified target type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.InvokeInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupport">
            <summary>
            Gets the supported immediate metadata tokens in the instruction.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags">
            <summary>
            Specifies a set of flags used to control invocation target metadata decoding.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags.MemberRef">
            <summary>
            Specifies that the invoke instruction supports member references.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags.MethodDef">
            <summary>
            Specifies that the invoke instruction supports member definitions.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags.MethodSpec">
            <summary>
            Specifies that the invoke instruction supports member specifications.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags.CallSite">
            <summary>
            Specifies that the invoke instruction supports call site invocations.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.InvokeInstruction.InvokeSupportFlags.All">
            <summary>
            Specifies support for all method invocation targets.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CalliInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.CalliInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CalliInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.CalliInstruction.InvokeSupport">
            <summary>
            Gets the supported immediate metadata tokens in the instruction.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.CallInstruction">
            <summary>
            Intermediate representation for various IL call operations.
            </summary>
            <remarks>
            Instances of this class are used to represent call, calli and callvirt
            instructions.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CallInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.CallInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CallInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.CallInstruction.InvokeSupport">
            <summary>
            Gets the supported immediate metadata tokens in the instruction.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.CallvirtInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CallvirtInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.CallvirtInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CallvirtInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.CallvirtInstruction.InvokeSupport">
            <summary>
            Gets the supported immediate metadata tokens in the instruction.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.CastclassInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CastclassInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.CastclassInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CastclassInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CastclassInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.CILLeakGuardStage">
            <summary>
            Logs CIL instruction, which leak past IR transformation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CILLeakGuardStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CILLeakGuardStage.ThrowCompilationException(Mosa.Compiler.Framework.Context)">
            <summary>
            Logs and optionally throws a compilation exception for the given context.
            </summary>
            <param name="context">The context to log and throw.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.CILLeakGuardStage.MustThrowCompilationException">
            <summary>
            Determines if this stage throws a compilation exception, if a CIL instruction is detected.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.TailPrefixInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.PrefixInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.PrefixInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.PrefixInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.PrefixInstruction.Flags">
            <summary>
            Gets the prefix flag.
            </summary>
            <value>A prefix fla</value>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.TailPrefixInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.TailPrefixInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.TailPrefixInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.VolatilePrefixInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.VolatilePrefixInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.VolatilePrefixInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.VolatilePrefixInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ReadOnlyPrefixInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ReadOnlyPrefixInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ReadOnlyPrefixInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ReadOnlyPrefixInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.DecodingStage">
            <summary>
            Represents the IL decoding compilation stage.
            </summary>
            <remarks>
            The IL decoding stage takes a stream of bytes and decodes the
            instructions represented into an MSIL based intermediate
            representation. The instructions are grouped into basic Blocks
            for easier local optimizations in later compiler stages.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.IInstructionDecoder">
            <summary>
            Interface of instruction decoders.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeByte">
            <summary>
            Decodes the byte value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeSByte">
            <summary>
            Decodes the sbyte value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeShort">
            <summary>
            Decodes the short value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeUShort">
            <summary>
            Decodes the ushort value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeInt">
            <summary>
            Decodes the int value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeUInt">
            <summary>
            Decodes the uint value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeLong">
            <summary>
            Decodes the long value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeFloat">
            <summary>
            Decodes the float value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeDouble">
            <summary>
            Decodes the double value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IInstructionDecoder.DecodeTokenType">
            <summary>
            Decodes the tokentype from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.IInstructionDecoder.Compiler">
            <summary>
            Gets the method compiler that is currently executing.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.IInstructionDecoder.Method">
            <summary>
            Gets the RuntimeMethod being compiled.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.IInstructionDecoder.TypeModule">
            <summary>
            Gets the type system.
            </summary>
            <value>The type system.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.IInstructionDecoder.GenericTypePatcher">
            <summary>
            Gets the generic type patcher.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.DecodingStage.codeReader">
            <summary>
            The reader used to process the code stream.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.DecodingStage.genericTypePatcher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.ReadMethodHeader(System.IO.BinaryReader)">
            <summary>
            Reads the method header from the instruction stream.
            </summary>
            <param name="reader">The reader used to decode the instruction stream.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Decode(Mosa.Compiler.Framework.IMethodCompiler,Mosa.Compiler.Framework.CIL.MethodHeader)">
            <summary>
            Decodes the instruction stream of the reader and populates the compiler.
            </summary>
            <param name="compiler">The compiler to populate.</param>
            <param name="header">The method header.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeByte">
            <summary>
            Decodes the byte value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeSByte">
            <summary>
            Decodes the sbyte value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeShort">
            <summary>
            Decodes the short value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeUShort">
            <summary>
            Decodes the ushort value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeInt">
            <summary>
            Decodes the int value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeUInt">
            <summary>
            Decodes the uint value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeLong">
            <summary>
            Decodes the long value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeFloat">
            <summary>
            Decodes the float value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeDouble">
            <summary>
            Decodes the double value from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#DecodeTokenType">
            <summary>
            Decodes the tokentype from the instruction stream
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#Compiler">
            <summary>
            Gets the compiler, that is currently executing.
            </summary>
            <value></value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#Method">
            <summary>
            Gets the RuntimeMethod being compiled.
            </summary>
            <value></value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#TypeModule">
            <summary>
            Gets the type system.
            </summary>
            <value>The type system.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.DecodingStage.Mosa#Compiler#Framework#CIL#IInstructionDecoder#GenericTypePatcher">
            <summary>
            Gets the generic type patcher.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.BreakInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BreakInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.BreakInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.BreakInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantFoldingStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantFoldingStage.FoldInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Folds the instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantFoldingStage.FoldAddSInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Folds the add instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantFoldingStage.FoldMulSInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Folds the mul S instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantFoldingStage.HasFoldableArguments(Mosa.Compiler.Framework.Context)">
            <summary>
            Determines whether [has foldable arguments] [the specified context].
            </summary>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if [has foldable arguments] [the specified context]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantFoldingStage.IsFoldableInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Determines whether [is foldable instruction] [the specified context].
            </summary>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if [is foldable instruction] [the specified context]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantFoldingStage.LoadSignedInteger(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Loads the signed integer.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.ExceptionPrologueStage">
            <summary>
            This stage inserts the ExceptionPrologue IR instruction at the beginning of each exception block.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ExceptionPrologueStage.Run">
            <summary>
            Runs the specified compiler.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.DelegateTypePatchStage">
            <summary>
            Emits metadata for assemblies and types
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.alreadyPatched">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.ConstructorName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.InvokeMethodName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.BeginInvokeMethodName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.EndInvokeMethodName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.InstanceFieldName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.MethodPtrFieldName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DelegateTypePatchStage.delegateStub">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.PatchType(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Patches the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.LoadDelegateStub">
            <summary>
            Loads the delegate stub.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndInsertFields(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates and inserts fields.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndInsertInstanceField(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates and inserts the instance field.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndInsertMethodPtrField(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates and inserts the method pointer field.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndReplaceMethods(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates and replace methods.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndReplaceConstructor(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates and replace constructor.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndReplaceInvokeMethod(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates and replace invoke method.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndReplaceInvokeWithReturnMethod(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates the and replace invoke with return method.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndReplaceBeginInvokeMethod(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates the and replace begin invoke method.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.GenerateAndReplaceEndInvokeMethod(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Generates the and replace end invoke method.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.DelegateTypePatchStage.SearchAndReplaceMethod(Mosa.Compiler.TypeSystem.RuntimeType,System.String,Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Searches and replaces the method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="methodToReplace">The method to replace.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ExceptionPrologueInstruction">
            <summary>
            An abstract intermediate representation of the method prologue.
            </summary>
            <remarks>
            This instruction is usually derived by the architecture and expanded appropriately
            for the calling convention of the method.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.BaseInstruction">
            <summary>
            Abstract base class for all instructions in the intermediate representation.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.IIRInstruction">
            <summary>
            Interface to a IR instruction
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BaseInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.BaseInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BaseInstruction.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.BaseInstruction"/>.
            </summary>
            <param name="operandCount">Specifies the number of operands of the context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BaseInstruction.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.BaseInstruction"/>.
            </summary>
            <param name="operandCount">Specifies the number of operands of the context.</param>
            <param name="resultCount">Specifies the number of results of the context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BaseInstruction.ToString">
            <summary>
            Returns a string representation of the context.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BaseInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BaseInstruction.Visit(Mosa.Compiler.Framework.IVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ExceptionPrologueInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.PrologueInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ExceptionPrologueInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.MetadataStage">
            <summary>
            Emits metadata for assemblies and types
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.EnterSSA">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.EnterSSA.oldLefHandSide">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.EnterSSA.variableInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.EnterSSA.dominanceCalculationStage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.EnterSSA.phiPlacementStage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.EnterSSA.RenameVariables(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Mosa.Compiler.Framework.EnterSSA.IsAssignment(Mosa.Compiler.Framework.Context)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.EnterSSA.NameForOperand(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            
            </summary>
            <param name="operand"></param>
            <returns></returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.EnterSSA.AssignmentInformation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.EnterSSA.VariableInformation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.ExceptionClauseHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionClauseHeader.clauses">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ExceptionClauseHeader.AddClause(Mosa.Compiler.Framework.ExceptionHandlingClause)">
            <summary>
            Adds the clause.
            </summary>
            <param name="clause">The clause.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.ExceptionClauseHeader.Clauses">
            <summary>
            Gets the clauses.
            </summary>
            <value>The clauses.</value>
        </member>
        <member name="T:Mosa.Compiler.InternalTrace.InstructionLogger">
            <summary>
            Logs all instructions.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.InternalTrace.InstructionLogger.LogInstructions(System.Text.StringBuilder,Mosa.Compiler.Framework.Context)">
            <summary>
            Logs the instructions in the given enumerable to the trace.
            </summary>
            <param name="ctx">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.LeaveSSA">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LeaveSSA.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LeaveSSA.ProcessPhiInstruction(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.Context)">
            <summary>
            Processes the phi instruction.
            </summary>
            <param name="block">The block.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LeaveSSA.InsertCopyStatement(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Inserts the copy statement.
            </summary>
            <param name="predecessor">The predecessor.</param>
            <param name="result">The result.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LeaveSSA.IsBranchInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Determines whether [is branch instruction] [the specified context].
            </summary>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if [is branch instruction] [the specified context]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.OperandDeterminationStage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.OperandDeterminationStage.workList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.OperandDeterminationStage.processed">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.OperandDeterminationStage.enqueued">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.OperandDeterminationStage.outgoingStack">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.OperandDeterminationStage.scheduledMoves">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.Run">
            <summary>
            Runs the specified compiler.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.Trace(System.Int32,Mosa.Compiler.Framework.ExceptionHandlingClause)">
            <summary>
            Traces the specified label.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.AssignOperands(Mosa.Compiler.Framework.OperandDeterminationStage.WorkItem)">
            <summary>
            Assigns the operands.
            </summary>
            <param name="workItem">The work item.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.CreateScheduledMoves(Mosa.Compiler.Framework.BasicBlock,System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Creates the scheduled moves.
            </summary>
            <param name="block">The block.</param>
            <param name="operandStack">The operand stack.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.AssignOperands(Mosa.Compiler.Framework.BasicBlock,System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Assigns the operands.
            </summary>
            <param name="block">The block.</param>
            <param name="operandStack">The operand stack.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.CreateMovesForIncomingStack(Mosa.Compiler.Framework.BasicBlock,System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Creates the moves for incoming stack.
            </summary>
            <param name="operandStack">The operand stack.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.CreateOutgoingMoves(Mosa.Compiler.Framework.BasicBlock,System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand},System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Creates the outgoing moves.
            </summary>
            <param name="block">The block.</param>
            <param name="operandStack">The operand stack.</param>
            <param name="joinStack">The join stack.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.AssignOperandsFromCILStack(Mosa.Compiler.Framework.Context,System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Assigns the operands from CIL stack.
            </summary>
            <param name="ctx">The context.</param>
            <param name="currentStack">The current stack.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.PushResultOperands(Mosa.Compiler.Framework.Context,System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Pushes the result operands on to the stack
            </summary>
            <param name="ctx">The context.</param>
            <param name="currentStack">The current stack.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.OperandDeterminationStage.WorkItem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.OperandDeterminationStage.WorkItem.Block">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.OperandDeterminationStage.WorkItem.IncomingStack">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.OperandDeterminationStage.WorkItem.#ctor(Mosa.Compiler.Framework.BasicBlock,System.Collections.Generic.Stack{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.OperandDeterminationStage.WorkItem"/> class.
            </summary>
            <param name="block">The block.</param>
            <param name="incomingStack">The incoming stack.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.Operand">
            <summary>
            Abstract base class for IR instruction operands.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.Operand.Undefined">
            <summary>
            Undefined operand constant.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.Operand._type">
            <summary>
            The namespace of the operand.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.Operand._definitions">
            <summary>
            Holds a list of instructions, which define this operand.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.Operand._uses">
            <summary>
            Holds a list of instructions, which use this operand.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.Operand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <param name="type">The type of the operand.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.Operand.StackTypeFromSigType(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Retrieves the stack type From a sig type.
            </summary>
            <param name="type">The signature type to convert to a stack type code.</param>
            <returns>The equivalent stack type code.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.Operand.SigTypeFromStackType(Mosa.Compiler.Framework.StackTypeCode)">
            <summary>
            Sigs the type of the type From stack.
            </summary>
            <param name="typeCode">The type code.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.Operand.Replace(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.InstructionSet)">
            <summary>
            Replaces this operand in all uses and defs with the given operand.
            </summary>
            <param name="replacement">The replacement operand.</param>
            <param name="instructionSet">The instruction set.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.Operand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.Operand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>The return value is true if the operands are equal; false if not.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.Operand.Definitions">
            <summary>
            Returns a list of instructions, which use this operand.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.Operand.IsRegister">
            <summary>
            Determines if the operand is a register.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.Operand.IsStackLocal">
            <summary>
            Determines if the operand is a stack local variable.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.Operand.StackType">
            <summary>
            Returns the stack type of the operand.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.Operand.Type">
            <summary>
            Returns the type of the operand.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.Operand.Uses">
            <summary>
            Returns a list of instructions, which use this operand.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.VirtualRegisterOperand">
            <summary>
            Represents an operand stored in a machine specific register.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.VirtualRegisterOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Operands.VirtualRegisterOperand"/> class.
            </summary>
            <param name="type">The signature type of the value the register holds.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.VirtualRegisterOperand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>The return value is true if the operands are equal; false if not.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.VirtualRegisterOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.RegisterOperand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.VirtualRegisterOperand.IsRegister">
            <summary>
            This is a register operand.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CompilerOptions.Multiboot">
            <summary>
            Gets or sets the multiboot.
            </summary>
            <value>The multiboot.</value>
        </member>
        <member name="F:Mosa.Compiler.Framework.CompilerOptions.Elf32">
            <summary>
            Gets or sets the elf32.
            </summary>
            <value>The elf32.</value>
        </member>
        <member name="F:Mosa.Compiler.Framework.CompilerOptions.PortableExecutable">
            <summary>
            Gets or sets the portable executable.
            </summary>
            <value>The portable executable.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.Architecture">
            <summary>
            Gets or sets the architecture.
            </summary>
            <value>The architecture.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.OutputFile">
            <summary>
            Gets or sets the output file.
            </summary>
            <value>The output file.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.Linker">
            <summary>
            Gets or sets the linker stage.
            </summary>
            <value>The linker stage.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.BootCompilerStage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.StatisticsFile">
            <summary>
            Gets or sets the statistics file.
            </summary>
            <value>The statistics file.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.MapFile">
            <summary>
            Gets or sets the map file.
            </summary>
            <value>The map file.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.EnableSSA">
            <summary>
            Gets or sets a value indicating whether [enable SSA].
            </summary>
            <value><c>true</c> if [enable SSA]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.EnableStaticAllocations">
            <summary>
            Gets or sets a value indicating whether [enable static allocations].
            </summary>
            <value>
            	<c>true</c> if [enable static allocations]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerOptions.MethodPipelineExportDirectory">
            <summary>
            Gets or sets the method pipeline export directory, used for debugging
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.PhiPlacementStage">
            <summary>
            	Places phi instructions for the SSA transformation
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.PhiPlacementStage.strategy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.PhiPlacementStage.assignments">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.#ctor(Mosa.Compiler.Framework.PhiPlacementStage.PhiPlacementStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.PhiPlacementStage"/> class.
            </summary>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.PhiPlacementStage"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.IsAssignmentToStackVariable(Mosa.Compiler.Framework.Context)">
            <summary>
            Determines whether [is assignment to stack variable] [the specified instruction].
            </summary>
            <param name="instruction">The instruction.</param>
            <returns>
              <c>true</c> if [is assignment to stack variable] [the specified instruction]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.NameForOperand(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Names for operand.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.CollectAssignments">
            <summary>
            Collects the assignments.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.AddToAssignments(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Adds to assignments.
            </summary>
            <param name="operand">The operand.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.InsertPhiInstruction(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Inserts the phi instruction.
            </summary>
            <param name="block">The block.</param>
            <param name="variable">The variable.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.PlacePhiFunctionsMinimal">
            <summary>
            Places the phi functions minimal.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.PlacePhiFunctionsSemiPruned">
            <summary>
            Places the phi functions semi pruned.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.PlacePhiFunctionsPruned">
            <summary>
            Places the phi functions pruned.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.PhiPlacementStage.Assignments">
            <summary>
            Gets the assignments.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.PhiPlacementStage.PhiPlacementStrategy">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.PhiPlacementStage.AssignmentInformation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.PhiPlacementStage.AssignmentInformation.AssigningBlocks">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.PhiPlacementStage.AssignmentInformation.Operand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PhiPlacementStage.AssignmentInformation.#ctor(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.PhiPlacementStage.AssignmentInformation"/> class.
            </summary>
            <param name="operand">The operand.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.TypeLayoutStage">
            <summary>
            Performs memory layout of a type for compilation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.TypeLayoutStage.BuildMethodTable(Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Builds the method table.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.TypeLayoutStage.CreateStaticField(Mosa.Compiler.TypeSystem.RuntimeField)">
            <summary>
            Allocates memory for the static field and initializes it.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ThrowInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.OneOperandInstruction">
            <summary>
            Abstract base class for IR instructions with one operand.
            </summary>
            <remarks>
            The <see cref="T:Mosa.Compiler.Framework.IR.OneOperandInstruction"/> is the base class for
            IR instructions using one operand.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.OneOperandInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.ThreeOperandInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.OneOperandInstruction.#ctor(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.TwoOperandInstruction"/>.
            </summary>
            <param name="op">The unary operand of this instruction.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ThrowInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.GenericsResolverStage">
            <summary>
            This stage is used to resolve methods inside generic classes or structs.
            For every type instantiation, a new method is created with the
            generic parameter substituted with the corresponding type.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IMethodCompilerBuilder">
            <summary>
            Interface provided by method compiler builder stages.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompilerBuilder.Scheduled">
            <summary>
            Gets the scheduled method builders.
            </summary>
            <value>A collection of the scheduled methods.</value>
        </member>
        <member name="M:Mosa.Compiler.Framework.GenericsResolverStage.HasGenericParameters(Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Determines if the given method is a method 
            of a generic class that uses a generic parameter.
            </summary>
            <param name="method">The method to check</param>
            <returns>True if the method relies upon generic parameters</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.GenericsResolverStage.IsGenericParameter(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Determines if the given SigType is generic
            </summary>
            <param name="parameter">The given SigType of the parameter</param>
            <returns>True if the parameter is generic.</returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.IIntrinsicMethod">
            <summary>
            Interface to an intrinsic instruction
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IIntrinsicMethod.ReplaceIntrinsicCall(Mosa.Compiler.Framework.Context,Mosa.Compiler.TypeSystem.ITypeSystem,System.Collections.Generic.IList{Mosa.Compiler.TypeSystem.RuntimeParameter})">
            <summary>
            Replaces the intrinsic call site
            </summary>
            <param name="context">The context.</param>
            <param name="typeSystem">The type system.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Intrinsics.InternalAllocateString.Mosa#Compiler#Framework#IIntrinsicMethod#ReplaceIntrinsicCall(Mosa.Compiler.Framework.Context,Mosa.Compiler.TypeSystem.ITypeSystem,System.Collections.Generic.IList{Mosa.Compiler.TypeSystem.RuntimeParameter})">
            <summary>
            Replaces the intrinsic call site
            </summary>
            <param name="context">The context.</param>
            <param name="typeSystem">The type system.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.AddFInstruction">
            <summary>
            Intermediate representation of the floating point add operation.
            </summary>
            <remarks>
            The add instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) added with the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ThreeOperandInstruction">
            <summary>
            Abstract base class for IR instructions with three operands.
            </summary>
            <remarks>
            The <see cref="T:Mosa.Compiler.Framework.IR.ThreeOperandInstruction"/> is the base class for
            IR instructions using three operands. It provides properties to
            easily access the individual operands.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ThreeOperandInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.ThreeOperandInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddFInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.AddFInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddFInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.AddSInstruction">
            <summary>
            Intermediate representation of the signed add operation.
            </summary>
            <remarks>
            The add instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) added with the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddSInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.AddSInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddSInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.AddUInstruction">
            <summary>
            Intermediate representation of the unsigned add operation.
            </summary>
            <remarks>
            The add instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) added with the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddUInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.AddUInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddUInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.BreakInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BreakInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.NopInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.BreakInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.DivFInstruction">
            <summary>
            Intermediate representation of the floating point division operation.
            </summary>
            <remarks>
            The instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) divided by the second operand (index 1).
            <para />
            Both the first and second operand must be the same floating point type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.DivFInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.DivFInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.DivFInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.DivSInstruction">
            <summary>
            Intermediate representation of the signed division operation.
            </summary>
            <remarks>
            The mul instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) divided by the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.DivSInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.DivSInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.DivSInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.DivUInstruction">
            <summary>
            Intermediate representation of the unsigned division operation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.DivUInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.DivUInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.DivUInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.MulFInstruction">
            <summary>
            Intermediate representation of the floating point multiplication operation.
            </summary>
            <remarks>
            The instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) multiplied with the second operand (index 1).
            <para />
            Both the first and second operand must be the same floating point type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MulFInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.MulFInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MulFInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.MulSInstruction">
            <summary>
            Intermediate representation of the signed multiplication operation.
            </summary>
            <remarks>
            The mul instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) multiplied with the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MulSInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.MulSInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MulSInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.MulUInstruction">
            <summary>
            Intermediate representation of the unsigned multiplication operation.
            </summary>
            <remarks>
            The mul instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) multiplied with the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MulUInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.MulUInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MulUInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.RemFInstruction">
            <summary>
            Intermediate representation of the floating point remainder operation.
            </summary>
            <remarks>
            The instruction is a three-address instruction, where the result receives
            the remainder of the division of the first operand (index 0) by the second operand (index 1).
            <para />
            Both the first and second operand must be the same floating point type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.RemFInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.RemFInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.RemFInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.RemSInstruction">
            <summary>
            Intermediate representation of the signed remainder operation.
            </summary>
            <remarks>
            The instruction is a three-address instruction, where the result receives
            the remainder of the division of the first operand (index 0) by the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.RemSInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.RemSInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.RemSInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.RemUInstruction">
            <summary>
            Intermediate representation of the unsigned remainder operation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.RemUInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.RemUInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.RemUInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.SubFInstruction">
            <summary>
            Intermediate representation of the floating point subtraction operation.
            </summary>
            <remarks>
            The add instruction is a three-address instruction, where the result receives
            the value of the second operand (index 1) subtracted from the first operand (index 0).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SubFInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.SubFInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SubFInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.SubSInstruction">
            <summary>
            Intermediate representation of the signed subtraction operation.
            </summary>
            <remarks>
            The add instruction is a three-address instruction, where the result receives
            the value of the second operand (index 1) subtracted from the first operand (index 0).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SubSInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.SubSInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SubSInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.SubUInstruction">
            <summary>
            Intermediate representation of the unsigned subtraction operation.
            </summary>
            <remarks>
            The add instruction is a three-address instruction, where the result receives
            the value of the second operand (index 1) subtracted from the first operand (index 0).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SubUInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.SubUInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SubUInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.MethodCompilerSchedulerStage">
            <summary>
            Schedules compilation of types/methods.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.SymbolOperand">
            <summary>
            An operand, which represents a symbol in the program data.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.SymbolOperand.name">
            <summary>
            Holds the name of the label.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.SymbolOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Operands.SymbolOperand"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.SymbolOperand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>The return value is true if the operands are equal; false if not.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.SymbolOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.SymbolOperand.FromMethod(Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Creates a symbol operand for the given method.
            </summary>
            <param name="method">The method to create a symbol operand for.</param>
            <returns>The created symbol operand.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.SymbolOperand.FromField(Mosa.Compiler.TypeSystem.RuntimeField)">
            <summary>
            Creates a new SymbolOperand for the given runtime field.
            </summary>
            <param name="runtimeField">The field to create a symbol operand for.</param>
            <returns>The created symbol operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.SymbolOperand.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.PlatformStubStage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.PlatformStubStage.Mosa#Compiler#Framework#IMethodCompilerStage#Setup(Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Setup stage specific processing on the compiler context.
            </summary>
            <param name="compiler">The compiler context to perform processing in.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.PlatformStubStage.Mosa#Compiler#Framework#IMethodCompilerStage#Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.PlatformStubStage.Mosa#Compiler#Framework#IPipelineStage#Name">
            <summary>
            Retrieves the name of the compilation stage.
            </summary>
            <value>The name of the compilation stage.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.IBlockOrderStage">
            <summary>
            This stage orders blocks
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.CILTransformationStage">
            <summary>
            Transforms CIL instructions into their appropriate IR.
            </summary>
            <remarks>
            This transformation stage transforms CIL instructions into their equivalent IR sequences.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.BaseCodeTransformationStage">
            <summary>
            Base class for code transformation stages.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.LinkBlocks(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Links the blocks.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.LinkBlocks(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Links the blocks.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.LinkBlocks(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Context)">
            <summary>
            Links the blocks.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.LinkBlocks(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Context)">
            <summary>
            Links the blocks.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="destination2">The destination2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.LinkBlocks(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Links the blocks.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="destination2">The destination2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.LinkBlocks(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Links the blocks.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="destination2">The destination2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.CreateEmptyBlockContext(System.Int32)">
            <summary>
            Create an empty block.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.CreateEmptyBlockContexts(System.Int32,System.Int32)">
            <summary>
            Creates empty Blocks.
            </summary>
            <param name="blocks">The Blocks.</param>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseCodeTransformationStage.SplitContext(Mosa.Compiler.Framework.Context,System.Boolean)">
            <summary>
            Splits the block.
            </summary>
            <param name="ctx">The context.</param>
            <param name="addJump">if set to <c>true</c> [add jump].</param>
            <returns></returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ICILVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Nop(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Nop instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Break(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Break instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldarg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldarg instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldarga(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldarga instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldloc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldloca(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldloca instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldstr(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldstr instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldflda(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldflda instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldsfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldsfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldsflda(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldsflda instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldftn(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldftn instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldvirtftn(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldvirtftn instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldtoken(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldtoken instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stloc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Starg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Starg instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stsfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stsfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Dup(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Dup instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Pop(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Pop instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Jmp(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Jmp instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Call(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Call instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Calli(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Calli instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ret(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ret instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Branch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Branch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.UnaryBranch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for UnaryBranch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.BinaryBranch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for BinaryBranch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Switch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Switch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.BinaryLogic(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for BinaryLogic instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Shift(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Shift instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Neg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Neg instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Not(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Not instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Conversion(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Conversion instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Callvirt(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Callvirt instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Cpobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Cpobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Newobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Newobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Castclass(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Castclass instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.IsInst(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Isinst instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Unbox(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Unbox instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Throw(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Throw instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Box(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Box instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Newarr(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Newarr instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldlen(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldlen instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldelema(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldelema instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldelem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldelem instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stelem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stelem instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.UnboxAny(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for UnboxAny instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Refanyval(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Refanyval instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.UnaryArithmetic(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for UnaryArithmetic instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Mkrefany(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Mkrefany instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.ArithmeticOverflow(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ArithmeticOverflow instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Endfinally(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Endfinally instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Leave(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Leave instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Arglist(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Arglist instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.BinaryComparison(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for BinaryComparison instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Localalloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Localalloc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Endfilter(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Endfilter instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.InitObj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for InitObj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Cpblk(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Cpblk instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Initblk(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Initblk instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Prefix(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Prefix instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Rethrow(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Rethrow instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Sizeof(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Sizeof instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Refanytype(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Refanytype instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Add(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Add instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Sub(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Sub instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Mul(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Mul instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Div(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Div instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Rem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Rem instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldarg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldarg instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldarga(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldarga instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldloc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldloca(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldloca instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldsfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldsfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldsflda(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldsflda instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldftn(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldftn instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldvirtftn(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldvirtftn instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldtoken(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldtoken instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Stloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stloc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Starg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Starg instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Stobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Stsfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stsfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Dup(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Dup instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Call(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Call instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Calli(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Calli instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ret(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ret instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#BinaryLogic(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for BinaryLogic instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Shift(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Shift instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Neg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Neg instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Not(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Not instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Conversion(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Conversion instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Callvirt(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Callvirt instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Newarr(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Newarr instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Newobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Newobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Castclass(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Castclass instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#IsInst(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Isinst instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Unbox(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Unbox instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Throw(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Throw instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Box(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Box instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.BinaryComparison(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for BinaryComparison instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Cpblk(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Cpblk instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Initblk(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Initblk instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Rethrow(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Rethrow instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Nop(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Nop instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Pop(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Pop instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Break(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Break instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldstr(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldstr instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldflda(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldflda instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Stfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stfld instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Jmp(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Jmp instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Branch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Branch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.UnaryBranch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for UnaryBranch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.BinaryBranch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for BinaryBranch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Switch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Switch instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Cpobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Cpobj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldlen(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldlen instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldelema(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldelema instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Ldelem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Ldelem instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Stelem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Stelem instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#UnboxAny(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for UnboxAny instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Refanyval(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Refanyval instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#UnaryArithmetic(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for UnaryArithmetic instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Mkrefany(Mosa.Compiler.Framework.Context)">
            <summary>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#ArithmeticOverflow(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ArithmeticOverflow instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Endfinally(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Endfinally instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Leave(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Leave instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Arglist(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Arglist instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Localalloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Localalloc instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Endfilter(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Endfilter instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#InitObj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for InitObj instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Prefix(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Prefix instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Sizeof(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Sizeof instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Refanytype(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Refanytype instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Add(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Add instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Sub(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Sub instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Mul(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Mul instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Div(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Div instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.Rem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for Rem instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.IsTruncating(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Determines if a store is silently truncating the value.
            </summary>
            <param name="dest">The destination operand.</param>
            <param name="source">The source operand.</param>
            <returns>True if the store is truncating, otherwise false.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.IsSignExtending(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Determines if the load should sign extend the given source operand.
            </summary>
            <param name="source">The source operand to determine sign extension for.</param>
            <returns>True if the given operand should be loaded with its sign extended.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.IsZeroExtending(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Determines if the load should sign extend the given source operand.
            </summary>
            <param name="source">The source operand to determine sign extension for.</param>
            <returns>True if the given operand should be loaded with its sign extended.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.GetImplicitResultSigType(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Determines the implicit result type of the load  instruction.
            </summary>
            <param name="sigType">The signature type of the source operand.</param>
            <returns>The signature type of the result.</returns>
            <remarks>
            This method performs the implicit type conversion mandated by the CIL spec
            for load instructions.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.ConvTypeFromCilType(Mosa.Compiler.Metadata.CilElementType)">
            <summary>
            Converts a <see cref="T:Mosa.Compiler.Metadata.CilElementType"/> to <see cref="T:Mosa.Compiler.Framework.IR.CILTransformationStage.ConvType"/>
            </summary>
            <param name="cet">The CilElementType to convert.</param>
            <returns>The equivalent ConvType.</returns>
            <exception cref="T:System.NotSupportedException"><paramref name="cet"/> can't be converted.</exception>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.ProcessConversionInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Selects the appropriate IR conversion  instruction.
            </summary>
            <param name="context">The transformation context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.ProcessExternalCall(Mosa.Compiler.Framework.Context)">
            <summary>
            Processes external method calls.
            </summary>
            <param name="context">The transformation context.</param>
            <returns>
            	<c>true</c> if the method was replaced by an intrinsic; <c>false</c> otherwise.
            </returns>
            <remarks>
            This method checks if the call target has an Intrinsic-Attribute applied with
            the current architecture. If it has, the method call is replaced by the specified
            native  instruction.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.ProcessInvokeInstruction(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,System.Collections.Generic.List{Mosa.Compiler.Framework.Operands.Operand})">
            <summary>
            Processes a method call instruction.
            </summary>
            <param name="context">The transformation context.</param>
            <param name="destinationOperand">The operand, which holds the call destination.</param>
            <param name="resultOperand"></param>
            <param name="operands"></param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.ProcessLoadInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Replaces the IL load instruction by an appropriate IR move instruction or removes it entirely, if
            it is a native size.
            </summary>
            <param name="context">Provides the transformation context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.ProcessStoreInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Replaces the IL store instruction by an appropriate IR move  instruction.
            </summary>
            <param name="context">Provides the transformation context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CILTransformationStage.ReplaceWithVmCall(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IR.VmCall)">
            <summary>
            Replaces the instruction with an internal call.
            </summary>
            <param name="context">The transformation context.</param>
            <param name="internalCallTarget">The internal call target.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.CILTransformationStage.ConvType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ConstrainedPrefixInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ConstrainedPrefixInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ConstrainedPrefixInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ConstrainedPrefixInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ConversionInstruction">
            <summary>
            Implements the internal representation for the IL conversion instructions.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.UnaryArithmeticInstruction">
            <summary>
            Represents a unary instruction, which performs an operation on the operand and places
            the result on the stack.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryArithmeticInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.UnaryArithmeticInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryArithmeticInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryArithmeticInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ConversionInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ConversionInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ConversionInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx"></param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ConversionInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.Instruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.Instruction.Get(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Gets the instruction.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.Instruction.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.Instruction.Instructions">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.MethodFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.TinyFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.FatFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.MoreSections">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.InitLocals">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.TinyCodeSizeMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.HeaderSizeMask">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.ValidHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodFlags.HeaderMask">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.MethodHeader">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodHeader.Flags">
            <summary>
            Header flags 
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodHeader.MaxStack">
            <summary>
            Maximum stack size 
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodHeader.CodeSize">
            <summary>
            Size of the code in bytes 
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.MethodHeader.LocalsSignature">
            <summary>
            Local variable signature token 
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.StoreInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StoreInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.StlocInstruction"/> class.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.Prefix">
            <summary>
            Specifies the possible prefixes of IL instructions.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.Prefix.Unaligned">
            <summary>
            Indicates a potentially unaligned, but valid memory access for the instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.Prefix.Volatile">
            <summary>
            Indicates a volatile memory access, e.g. this memory access should not be optimized away and always 
            needs to go to memory.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.Prefix.Tail">
            <summary>
            Subsequent call terminates the method. Can be optimized to remove the current method call frame.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.Prefix.Constrained">
            <summary>
            Invoke a member on a value of a variable type.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.Prefix.No">
            <summary>
            Do not perform type, range or null checks on the following instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.Prefix.ReadOnly">
            <summary>
            Subsequent array address operation performs no type check at runtime and returns a controlled mutability managed pointer.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.CpblkInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.NaryInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NaryInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NaryInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
            <param name="operandCount">The operand count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NaryInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NaryInstruction"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="operandCount">The operand count.</param>
            <param name="resultCount">The result count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CpblkInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.CpblkInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CpblkInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.CpobjInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CpobjInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.CpobjInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.CpobjInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.DivInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DivInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.DivInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DivInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.DupInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DupInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NopInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DupInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.DupInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.ExceptionHandlerType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlerType.Exception">
            <summary>
            A typed exception handler clause.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlerType.Filter">
            <summary>
            An exception filter and handler clause.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlerType.Finally">
            <summary>
            A finally clause.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlerType.Fault">
            <summary>
            A fault clause. This is similar to finally, except its only executed if an exception is/was processed.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.ExceptionHandlingClause">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlingClause.ExceptionHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlingClause.TryOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlingClause.TryLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlingClause.HandlerOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlingClause.HandlerLength">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlingClause.ClassToken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ExceptionHandlingClause.FilterOffset">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ExceptionHandlingClause.IsLabelWithinTry(System.Int32)">
            <summary>
            Determines whether [is label within try] [the specified label].
            </summary>
            <param name="label">The label.</param>
            <returns>
              <c>true</c> if [is label within try] [the specified label]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ExceptionHandlingClause.IsLabelWithinHandler(System.Int32)">
            <summary>
            Determines whether [is label within handler] [the specified label].
            </summary>
            <param name="label">The label.</param>
            <returns>
              <c>true</c> if [is label within handler] [the specified label]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ExceptionHandlingClause.Read(System.IO.BinaryReader,System.Boolean)">
            <summary>
            Reads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="isFat">if set to <c>true</c> [is fat].</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.ExceptionHandlingClause.TryEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.ExceptionHandlingClause.HandlerEnd">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.EndFilterInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.EndFilterInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.EndFilterInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.EndFilterInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.EndFilterInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.EndFinallyInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.EndFinallyInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.EndFinallyInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.EndFinallyInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.InitblkInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InitblkInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.InitblkInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InitblkInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.InitObjInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InitObjInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.InitObjInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InitObjInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.InitObjInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.IsInstInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IsInstInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.IsInstInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IsInstInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.IsInstInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.JumpInstruction">
            <summary>
            Represents a basic jump instruction.
            </summary>
            <remarks>
            Other more complex method invocation instructions derive from this class, specifically the CallInstruction,
            the CalliInstruction and CallvirtInstruction classes. They share the features provided by the JumpInstruction.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.JumpInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.JumpInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.JumpInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.JumpInstruction.InvokeSupport">
            <summary>
            Gets the supported immediate metadata tokens in the instruction.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdargaInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LoadInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LoadInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LoadInstruction"/> class.
            </summary>
            <param name="opCode">The op code.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LoadInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LoadInstruction"/> class.
            </summary>
            <param name="code">The code.</param>
            <param name="operandCount">The number of operands of the load.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdargaInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdargaInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdargaInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdargaInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdargInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdargInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdargInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdargInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified CIL instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
            <remarks>
            This method is used by instructions to retrieve immediate operands
            From the instruction stream.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdargInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdcInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdcInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdcInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdcInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdcInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdelemaInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdelemaInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdelemaInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdelemaInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdelemaInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdelemInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.LdelemInstruction.elementType">
            <summary>
            A fixed typeref for ldind.* instructions.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdelemInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdelemInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdelemInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdelemInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdfldaInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdfldaInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdfldaInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdfldaInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdfldaInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdfldInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdfldInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdfldInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdfldInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdfldInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdftnInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdftnInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdftnInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdftnInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdftnInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdlenInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlenInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdlenInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlenInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlenInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdlocaInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlocaInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdlocaInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlocaInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlocaInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdlocInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlocInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdlocInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlocInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdlocInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdobjInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.LdobjInstruction.typeRef">
            <summary>
            A fixed typeref for ldind.* instructions.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdobjInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdobjInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdobjInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdobjInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdobjInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdsfldaInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdsfldaInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdsfldaInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdsfldaInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdsfldaInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdsfldInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdsfldInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdsfldInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdsfldInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdsfldInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdstrInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdstrInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdstrInstruction"/> class.
            </summary>
            <param name="opCode">The op code.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdstrInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdstrInstruction.ToString(Mosa.Compiler.Framework.Context)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdstrInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdtokenInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdtokenInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdtokenInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdtokenInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdtokenInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LdvirtftnInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdvirtftnInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LdvirtftnInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdvirtftnInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LdvirtftnInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LeaveInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LeaveInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LeaveInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LeaveInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LeaveInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.LocalallocInstruction">
            <summary>
            Intermediate representation of the localalloc IL instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LocalallocInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.LocalallocInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LocalallocInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.LocalallocInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.MkrefanyInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.MkrefanyInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.MkrefanyInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.MkrefanyInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.MkrefanyInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.MulInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.MulInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.MulInstruction"/> class.
            </summary>
            <param name="opCode">The op code.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.MulInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.NegInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.NegInstruction._typeCodes">
            <summary>
            Holds the typecode validation table from ISO/IEC 23271:2006 (E),
            Partition III, §1.5, Table 3.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NegInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NegInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NegInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx"></param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NegInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.NewarrInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NewarrInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NewarrInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NewarrInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NewarrInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.NewobjInstruction">
            <summary>
            Intermediate representation of the newobj IL instruction.
            </summary>
            <remarks>
            Actually this is a waste. Newobj is a compound of at least three instructions:
              - pop ctor-args
              - push type
              - push type-size
              - call allocator.new
              - dup
              - push ctor-args
              - call ctor
            Note that processing this instruction does require extensive call stack rewriting in order
            to insert the this reference in front of all other ctor arguments, even though it is pushed
            *after* calling allocator new as seen above. Additionally note that after executing the ctor
            call another reference to this is on the stack in order to be able to use the constructed object.
            Note that this is very similar to arrays (newarr), except there's no ctor to call.
            I don't want to have runtime helpers for newarr and newobj, so we unite both by using a common
            allocator, which receives the type and memory size as parameters. This also fixes string
            issues for us, which vary in size and thus can't be allocated by a plain newobj.
            <para/>
            These details are automatically processed by the Expand function, which expands this highlevel
            opcode into its parts as described above. The exception is that Expand is not stack based anymore
            and uses virtual registers to implement two calls:
            - this-vreg = allocator-new(type-vreg, type-size-vreg)
            - ctor(this-vreg[, args])
            <para/>
            Those calls are ultimately processed by further expansion and inlining, except that allocator-new
            is a kernel call and can't be inlined - even by the jit.
            <para/>
            The expansion essentially adds a dependency to mosacor, which provides the allocator and gc.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NewobjInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NewobjInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NewobjInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NewobjInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NewobjInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.NewobjInstruction.InvokeSupport">
            <summary>
            Gets the supported immediate metadata tokens in the instruction.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.NoPrefixInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NoPrefixInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NoPrefixInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NoPrefixInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.NotInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.NotInstruction._opTable">
            <summary>
            Operand table according to ISO/IEC 23271:2006 (E), Partition III, 1.5, Table 5.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NotInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NotInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NotInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx"></param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NotInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.OpCode">
            <summary>
            All CIL opcodes as defined in ISO/IEC 23271:2006 (E).
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Nop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Break">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarg_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarg_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarg_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarg_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloc_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloc_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloc_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloc_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stloc_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stloc_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stloc_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stloc_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarg_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarga_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Starg_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloc_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloca_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stloc_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldnull">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_m1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_0">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_5">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_6">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_7">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_i8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_r4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldc_r8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Dup">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Pop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Jmp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Call">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Calli">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ret">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Br_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Brfalse_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Brtrue_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Beq_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bge_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bgt_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ble_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Blt_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bne_un_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bge_un_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bgt_un_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ble_un_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Blt_un_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Br">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Brfalse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Brtrue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Beq">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bge">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bgt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ble">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Blt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bne_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bge_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Bgt_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ble_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Blt_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Switch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_i1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_u1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_i2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_u2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_i4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_u4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_i8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_i">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_r4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_r8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldind_ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_i1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_i2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_i4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_i8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_r4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_r8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Sub">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Div">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Div_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Rem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Rem_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.And">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Or">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Xor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Shl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Shr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Shr_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Neg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Not">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_i1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_i2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_i4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_i8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_r4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_r8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_u4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_u8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Callvirt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Cpobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldstr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Newobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Castclass">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Isinst">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_r_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Unbox">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Throw">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldflda">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldsfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldsflda">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stsfld">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stobj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i1_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i2_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i4_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i8_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u1_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u2_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u4_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u8_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Box">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Newarr">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldlen">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelema">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_i1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_u1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_i2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_u2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_i4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_u4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_i8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_i">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_r4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_r8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem_ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_i">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_i1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_i2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_i4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_i8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_r4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_r8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem_ref">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldelem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stelem">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Unbox_any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u4">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u8">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Refanyval">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ckfinite">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Mkrefany">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_call">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_catch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_dead">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_hoisted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_hoistedcall">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_lab">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_def">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_ref_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ann_phi">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldtoken">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_u2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_u1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_i">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_i">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_ovf_u">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Add_ovf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Add_ovf_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Mul_ovf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Mul_ovf_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Sub_ovf">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Sub_ovf_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Endfinally">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Leave">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Leave_s">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stind_i">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Conv_u">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Extop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Arglist">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ceq">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Cgt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Cgt_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Clt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Clt_un">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldftn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldvirtftn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldarga">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Starg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Ldloca">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Stloc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Localalloc">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Endfilter">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.PreUnaligned">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.PreVolatile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.PreTail">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.InitObj">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.PreConstrained">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Cpblk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Initblk">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.PreNo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Rethrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Sizeof">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.Refanytype">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.OpCode.PreReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.PopInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.PopInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.PopInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.PopInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.RefanytypeInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RefanytypeInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.RefanytypeInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RefanytypeInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RefanytypeInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.RefanyvalInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RefanyvalInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.RefanyvalInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RefanyvalInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RefanyvalInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RefanyvalInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.RemInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RemInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.RemInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RemInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.RethrowInstruction">
            <summary>
            Intermediate representation of the IL rethrow instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RethrowInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.RethrowInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.RethrowInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.RethrowInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ReturnInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ReturnInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ReturnInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ReturnInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ReturnInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.ReturnInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.ReturnInstruction.IsConditional">
            <summary>
            Determines if the branch is conditional.
            </summary>
            <value></value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ShiftInstruction">
            <summary>
            Intermediate representation for IL shift instructions.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.ShiftInstruction._operandTable">
            <summary>
            This operand table conforms to ISO/IEC 23271:2006 (E), Partition III, §1.5, Table 6.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ShiftInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ShiftInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ShiftInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ShiftInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.SizeofInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SizeofInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.SizeofInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SizeofInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SizeofInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.StargInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StargInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.StargInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StargInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StargInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.StargInstruction.PushResult">
            <summary>
            Starg has a result, but doesn't push it on the stack.
            </summary>
            <value><c>true</c> if [push result]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.StelemInstruction">
            <summary>
            Intermediate representation of the CIL stelem opcode family.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.StelemInstruction.typeRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StelemInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.StelemInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StelemInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StelemInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.StfldInstruction">
            <summary>
            Intermediate representation for the CIL stfld opcode.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StfldInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.StfldInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StfldInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StfldInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.StlocInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StlocInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.StlocInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StlocInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StlocInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.StlocInstruction.PushResult">
            <summary>
            Stloc has a result, but doesn't push it on the stack.
            </summary>
            <value><c>true</c> if [push result]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.StobjInstruction">
            <summary>
            Intermediate representation for stobj and stind.* IL instructions.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CIL.StobjInstruction.valueType">
            <summary>
            Specifies the type of the value.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StobjInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.StobjInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StobjInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StobjInstruction.Validate(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Validates the instruction operands and creates a matching variable for the result.
            </summary>
            <param name="ctx">The context.</param>
            <param name="compiler">The compiler.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StobjInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.StsfldInstruction">
            <summary>
            Intermediate representation of the CIL stsfld operation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StsfldInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.StsfldInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StsfldInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.StsfldInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.SubInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SubInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.SubInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SubInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.SwitchInstruction">
            <summary>
            Intermediate representation for the IL switch instruction.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction">
            <summary>
            Represents a unary branch instruction in internal representation.
            </summary>
            <remarks>
            This instruction is used to represent brfalse[.s] and brtrue[.s].
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction.GetModifier(Mosa.Compiler.Framework.Context)">
            <summary>
            Gets the instruction modifier.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.UnaryBranchInstruction.IsConditional">
            <summary>
            Determines if the branch is conditional.
            </summary>
            <value></value>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SwitchInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.SwitchInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SwitchInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.SwitchInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.SwitchInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.ThrowInstruction">
            <summary>
            Intermediate representation of the IL throw instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ThrowInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.ThrowInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.ThrowInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.CIL.ThrowInstruction.FlowControl">
            <summary>
            Determines flow behavior of this instruction.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.UnalignedPrefixInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnalignedPrefixInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.UnalignedPrefixInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnalignedPrefixInstruction.Decode(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.CIL.IInstructionDecoder)">
            <summary>
            Decodes the specified instruction.
            </summary>
            <param name="ctx">The context.</param>
            <param name="decoder">The instruction decoder, which holds the code stream.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.UnboxAnyInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnboxAnyInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.UnboxAnyInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnboxAnyInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.UnboxInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnboxInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.UnboxInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.UnboxInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.Branch">
            <summary>
            Holds the branch target information
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IBranch">
            <summary>
            Base interface for CIL branch instructions.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IBranch.Offset">
            <summary>
            Retrieves the instruction offset.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IBranch.Targets">
            <summary>
            Returns the branch targets instruction index.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Branch._offset">
            <summary>
            Holds the instruction offset.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Branch._branchTargets">
            <summary>
            Holds the branch targets instruction index.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Branch.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Branch"/> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.Branch.Offset">
            <summary>
            Retrieves the instruction offset.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Branch.Targets">
            <summary>
            Returns the branch targets instruction index.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Context">
            <summary>
            Provides context for transformations.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Context.index">
            <summary>
            Holds the instruction index operated on.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Context.instructionSet">
            <summary>
            Holds the list of instructions
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Context.block">
            <summary>
            Holds the block being operated on.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.#ctor(Mosa.Compiler.Framework.InstructionSet,Mosa.Compiler.Framework.BasicBlock,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Context"/> class.
            </summary>
            <param name="instructionSet">The instruction set.</param>
            <param name="block">The block.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.#ctor(Mosa.Compiler.Framework.InstructionSet,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Context"/> class.
            </summary>
            <param name="instructionSet">The instruction set.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.#ctor(Mosa.Compiler.Framework.InstructionSet,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Context"/> class.
            </summary>
            <param name="instructionSet">The instruction set.</param>
            <param name="basicBlock">The basic block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.#ctor(Mosa.Compiler.Framework.InstructionSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Context"/> class.
            </summary>
            <param name="instructionSet">The instruction set.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.Visit(Mosa.Compiler.Framework.IVisitor)">
            <summary>
            Visits the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.CloneAtStart">
            <summary>
            Clones this context 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.GotoNext">
            <summary>
            Nexts this instance.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.GotoPrevious">
            <summary>
            Gotos the previous instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.GotoLast">
            <summary>
            Gotos the last instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.Clear">
            <summary>
            Clears the specified context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.InsertBefore">
            <summary>
            Inserts an instruction the before the current instruction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SliceBefore">
            <summary>
            Slices the instruction flow before the current instruction
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SliceAfter">
            <summary>
            Slices the instruction flow after the current instruction
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.Remove">
            <summary>
            Remove this instance.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.ReplaceInstructionOnly(Mosa.Compiler.Framework.IInstruction)">
            <summary>
            Replaces the instruction only.
            </summary>
            <param name="instruction">The instruction.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,System.Byte,System.Byte)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="operandCount">The operand count.</param>
            <param name="resultCount">The result count.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.IR.ConditionCode)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.IR.ConditionCode,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="code">The code.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.IR.ConditionCode,Mosa.Compiler.Framework.BasicBlock,System.Boolean)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="code">The code.</param>
            <param name="block">The block.</param>
            <param name="branchHint">if set to <c>true</c> [branch hint].</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <param name="operand3">The operand3.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction">
            <summary>
            Inserts the instruction after.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.IR.ConditionCode)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="code">The code.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.IR.ConditionCode,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="code">The code.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.IR.ConditionCode,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="code">The code.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.IR.ConditionCode,Mosa.Compiler.Framework.BasicBlock,System.Boolean)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="code">The code.</param>
            <param name="block">The block.</param>
            <param name="branchHint">if set to <c>true</c> [branch hint].</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Inserts the instruction after.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.AppendInstruction(Mosa.Compiler.Framework.IInstruction,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the instruction.
            </summary>
            <param name="instruction">The instruction.</param>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <param name="operand3">The operand3.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetResult(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the result.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetResults(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the results.
            </summary>
            <param name="result">The result.</param>
            <param name="result2">The result2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetOperands(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the operands.
            </summary>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetOperands(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the operands.
            </summary>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetOperands(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the operands.
            </summary>
            <param name="result">The result.</param>
            <param name="operand1">The operand1.</param>
            <param name="operand2">The operand2.</param>
            <param name="operand3">The operand3.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetBranch(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Sets the branch.
            </summary>
            <param name="block">The block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetBranch(System.Int32)">
            <summary>
            Sets the branch.
            </summary>
            <param name="target1">The target1.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetBranch(System.Int32,System.Int32)">
            <summary>
            Sets the branch.
            </summary>
            <param name="target1">The target1.</param>
            <param name="target2">The target2.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.GetOperand(System.Int32)">
            <summary>
            Gets the operand by index
            </summary>
            <param name="opIndex">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetOperand(System.Int32,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the operand by index
            </summary>
            <param name="opIndex">The index.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.GetResult(System.Int32)">
            <summary>
            Gets the result by index
            </summary>
            <param name="opIndex">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.SetResult(System.Int32,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the result by index
            </summary>
            <param name="opIndex">The index.</param>
            <param name="result">The result operand.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Context.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.BasicBlock">
            <summary>
            Gets or sets the basic block currently processed.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.InstructionSet">
            <summary>
            Gets or sets the instruction set.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Index">
            <summary>
            Gets or sets the instruction index currently processed.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.TokenType">
            <summary>
            Gets or sets the type of the token.
            </summary>
            <value>The type of the token.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Instruction">
            <summary>
            Gets the instruction.
            </summary>
            <value>The result operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.NewInstruction">
            <summary>
            Sets the new instruction.
            </summary>
            <value>The result operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Label">
            <summary>
            Gets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Branch">
            <summary>
            Gets the result operand.
            </summary>
            <value>The result operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Operand1">
            <summary>
            Gets the first operand.
            </summary>
            <value>The first operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Operand2">
            <summary>
            Gets the second operand.
            </summary>
            <value>The second operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Operand3">
            <summary>
            Gets the third operand.
            </summary>
            <value>The third operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Operands">
            <summary>
            Gets the operands.
            </summary>
            <value>The operands.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Result">
            <summary>
            Gets the result operand.
            </summary>
            <value>The result operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Result2">
            <summary>
            Gets the second result operand.
            </summary>
            <value>The second result operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Results">
            <summary>
            Gets the operands.
            </summary>
            <value>The operands.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.OperandCount">
            <summary>
            Gets the operand count.
            </summary>
            <value>The operand count.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.ResultCount">
            <summary>
            Gets the result count.
            </summary>
            <value>The result count.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Ignore">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Mosa.Compiler.Framework.Context"/> is ignore.
            </summary>
            <value><c>true</c> if ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.HasPrefix">
            <summary>
            Gets or sets a value indicating whether this instance has prefix.
            </summary>
            <value>
            	<c>true</c> if this instance has prefix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.BranchHint">
            <summary>
            Gets or sets the branch hint (true means branch likely)
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.InvokeTarget">
            <summary>
            Holds the function being called.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.RuntimeField">
            <summary>
            Gets or sets the runtime field.
            </summary>
            <value>The runtime field.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Token">
            <summary>
            Gets or sets the token.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.ConditionCode">
            <summary>
            Gets or sets the condition code.
            </summary>
            <value>The condition code.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.LiteralData">
            <summary>
            Gets or sets the literal data.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Other">
            <summary>
            Gets the other object.
            </summary>
            <value>The other.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.IsFirstInstruction">
            <summary>
            Gets a value indicating whether this instance is first instruction.
            </summary>
            <value>
            	<c>true</c> if this instance is first instruction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.IsLastInstruction">
            <summary>
            Gets a value indicating whether [last instruction].
            </summary>
            <value><c>true</c> if [last instruction]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.EndOfInstruction">
            <summary>
            Gets a value indicating whether [end of instruction].
            </summary>
            <value><c>true</c> if [end of instruction]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Next">
            <summary>
            Returns the contexts of the next instruction
            </summary>
            <value>The next.</value>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Context.Previous">
            <summary>
            Returns the contexts of the previous instruction
            </summary>
            <value>The next.</value>
            <returns></returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.ICodeEmitter">
            <summary>
            Interface of a code emitter.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ICodeEmitter.Initialize(Mosa.Compiler.Framework.IMethodCompiler,System.IO.Stream,Mosa.Compiler.Linker.IAssemblyLinker)">
            <summary>
            Initializes the specified emitter.
            </summary>
            <param name="compiler">The compiler.</param>
            <param name="codeStream">The code stream.</param>
            <param name="linker">The linker.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ICodeEmitter.Label(System.Int32)">
            <summary>
            Emits a label into the code stream.
            </summary>
            <param name="label">The label name to emit.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ICodeEmitter.ResolvePatches">
            <summary>
            Resolves the patches.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ICodeEmitter.GetPosition(System.Int32)">
            <summary>
            Gets the position.
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.ICodeEmitter.CurrentPosition">
            <summary>
            Gets the current position.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.AddressOfInstruction">
            <summary>
            Retrieves the address of the variable represented by its operand.
            </summary>
            <remarks>
            The address of instruction is used to retrieve the memory address
            of its sole operand. The operand may not represent a register.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.TwoOperandInstruction">
            <summary>
            Abstract base class for IR instructions with two operands.
            </summary>
            <remarks>
            The <see cref="T:Mosa.Compiler.Framework.IR.TwoOperandInstruction"/> is the base class for
            IR instructions using two operands. It provides properties to
            easily access the individual operands.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.TwoOperandInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.ThreeOperandInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddressOfInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.AddressOfInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.AddressOfInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ArithmeticShiftRightInstruction">
            <summary>
            Intermediate representation of the shift right operation.
            </summary>
            <remarks>
            The shift instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) shifted by the number of bits specified by
            the second operand (index 1).
            <para/>
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            <para/>
            The most significant bits will be filled sign extended by this context. To fill
            them with zeroes, use <see cref="T:Mosa.Compiler.Framework.IR.ShiftRightInstruction"/> instead.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ArithmeticShiftRightInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.ArithmeticShiftRightInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ArithmeticShiftRightInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.CallInstruction">
            <summary>
            Intermediate representation of call context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CallInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.CallInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.CallInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ConditionCode">
            <summary>
            Specifies condition codes for <see cref="T:Mosa.Compiler.Framework.IR.ConditionCode"/>.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.Equal">
            <summary>
            Equality comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.NotEqual">
            <summary>
            Not equal comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.GreaterThan">
            <summary>
            Greater-than comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.GreaterOrEqual">
            <summary>
            Greater-than or equal comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.LessThan">
            <summary>
            Less-than comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.LessOrEqual">
            <summary>
            Less-than or equal comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.UnsignedGreaterThan">
            <summary>
            Unsigned greater than comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.UnsignedGreaterOrEqual">
            <summary>
            Unsigned greater than or equal comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.UnsignedLessThan">
            <summary>
            Unsigned less than comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.UnsignedLessOrEqual">
            <summary>
            Unsigned less than or equal comparison.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.NotSigned">
            <summary>
            Not unsigned 
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.Signed">
            <summary>
            signed
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.NoParity">
            <summary>
            No parity
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.Parity">
            <summary>
            Parity
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.Carry">
            <summary>
            Carry flag
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.NoCarry">
            <summary>
            No carry flag
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.Zero">
            <summary>
            Zero flag
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.ConditionCode.NoZero">
            <summary>
            No zero flag
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.NopInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.NopInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.NopInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.NopInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.IConditionalInstruction">
            <summary>
            Marks an IR instruction as being conditional.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IR.IConditionalInstruction.ConditionCode">
            <summary>
            Gets the condition code.
            </summary>
            <value>The condition code.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.LiteralData">
            <summary>
            Used to represent labelled literal data in the instruction stream.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.LiteralData._data">
            <summary>
            The literal data to embed in the instruction stream.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.LiteralData._label">
            <summary>
            Contains the label to apply to the data.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.LiteralData._type">
            <summary>
            Holds the signature type of the literal data.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LiteralData.#ctor(System.Int32,Mosa.Compiler.Metadata.Signatures.SigType,System.Object)">
            <summary>
            Initializes a new instance of LiteralInstruction.
            </summary>
            <param name="label">The label used to identify the literal in code.</param>
            <param name="type">The signature type of the literal data.</param>
            <param name="data">The data to embed along with the code stream.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.IR.LiteralData.Data">
            <summary>
            Gets an object, that represents the data to embed in the instruction stream.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IR.LiteralData.Label">
            <summary>
            Gets the label to apply to the data.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IR.LiteralData.Type">
            <summary>
            Gets the signature type of the data to embed.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.Instruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.AddFInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.AddSInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.AddUInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.AddressOfInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.ArithmeticShiftRightInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.BreakInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.EpilogueInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.FloatingPointCompareInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.FloatingPointToIntegerConversionInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.IntegerCompareBranchInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.IntegerCompareInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.IntegerToFloatingPointConversionInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.JmpInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.LoadInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.LogicalAndInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.LogicalNotInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.LogicalOrInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.LogicalXorInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.MoveInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.MulFInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.MulSInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.MulUInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.PhiInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.PopInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.PrologueInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.PushInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.ReturnInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.ShiftLeftInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.ShiftRightInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.SignExtendedMoveInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.StoreInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.ZeroExtendedMoveInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.CallInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.NopInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.SwitchInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.ThrowInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.Instruction.ExceptionPrologueInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.EpilogueInstruction">
            <summary>
            An abstract intermediate representation of the method epilogue.
            </summary>
            <remarks>
            This instruction is usually derived by the architecture and expanded appropriately
            for the calling convention of the method.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.EpilogueInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.EpilogueInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.EpilogueInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.FloatingPointCompareInstruction">
            <summary>
            Represents a floating point comparison context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.FloatingPointCompareInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.FloatingPointCompareInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.FloatingPointCompareInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.FloatingPointToIntegerConversionInstruction">
            <summary>
            Intermediate representation of a floating point to integral conversion operation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.FloatingPointToIntegerConversionInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.FloatingPointToIntegerConversionInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.FloatingPointToIntegerConversionInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.IIRVisitor">
            <summary>
            Visitor interface for instructions of the intermediate representation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.AddressOfInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for AddressOfInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.ArithmeticShiftRightInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ArithmeticShiftRightInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.CallInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for CallInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.EpilogueInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for EpilogueInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.FloatingPointCompareInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for FloatingPointCompareInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.FloatingPointToIntegerConversionInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for FloatingPointToIntegerConversionInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.IntegerCompareBranchInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for IntegerCompareInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.IntegerCompareInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for IntegerCompareInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.IntegerToFloatingPointConversionInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for IntegerToFloatingPointConversionInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.JmpInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for JmpInstruction"/> instruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.LiteralInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for LiteralInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.LoadInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for LoadInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.LogicalAndInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for LogicalAndInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.LogicalOrInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for LogicalOrInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.LogicalXorInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for LogicalXorInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.LogicalNotInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for LogicalNotInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.MoveInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for MoveInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.PhiInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for PhiInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.PopInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for PopInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.PrologueInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for PrologueInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.PushInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for PushInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.ReturnInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ReturnInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.ShiftLeftInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ShiftLeftInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.ShiftRightInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ShiftRightInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.SignExtendedMoveInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for SignExtendedMoveInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.StoreInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for StoreInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.ZeroExtendedMoveInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ZeroExtendedMoveInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.NopInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for NopInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.AddSInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for AddSInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.AddUInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for AddUInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.AddFInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for AddFInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.DivFInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for DivFInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.DivSInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for DivSInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.DivUInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for DivUInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.MulSInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for MulSInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.MulFInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for MulFInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.MulUInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for MulUInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.SubFInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for SubFInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.SubSInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for SubSInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.SubUInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for SubUInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.RemFInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for RemFInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.RemSInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for RemSInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.RemUInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for RemUInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.SwitchInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for SwitchInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.BreakInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for BreakInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.ThrowInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ThrowInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IIRVisitor.ExceptionPrologueInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for ExceptionPrologueInstruction.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IntegerCompareBranchInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.IntegerCompareInstruction">
            <summary>
            Intermediate representation of an integer comparison.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IntegerCompareInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.IntegerCompareInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IntegerCompareInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Abstract visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.IntegerToFloatingPointConversionInstruction">
            <summary>
            Intermediate representation of an integral to floating point conversion operation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.IntegerToFloatingPointConversionInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.IntegerToFloatingPointConversionInstruction"/> class.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.JmpInstruction">
            <summary>
            Intermediate representation of an unconditional branch context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.JmpInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.JmpInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.JmpInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Visits the specified visitor.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.LiteralInstruction">
            <summary>
            Used to represent labelled literal data in the instruction stream.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LiteralInstruction.#ctor">
            <summary>
            Initializes a new instance of Literalcontext.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LiteralInstruction.ToString(Mosa.Compiler.Framework.Context)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="context">The context.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LiteralInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.LoadInstruction">
            <summary>
            Loads a value From a memory pointer.
            </summary>
            <remarks>
            The load instruction is used to load a value from a memory pointer and an offset. The types must be compatible.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LoadInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.LoadInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LoadInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.LogicalAndInstruction">
            <summary>
            Intermediate representation of the and instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalAndInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.LogicalAndInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalAndInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.LogicalNotInstruction">
            <summary>
            Intermediate representation of the not instruction.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalNotInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.LogicalNotInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalNotInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.LogicalOrInstruction">
            <summary>
            Intermediate representation of the or context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalOrInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.LogicalOrInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalOrInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.LogicalXorInstruction">
            <summary>
            Intermediate representation of the exclusive-or operation.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalXorInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.LogicalXorInstruction"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.LogicalXorInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.MoveInstruction">
            <summary>
            Intermediate representation of an arbitrary move context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MoveInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.MoveInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.MoveInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.PhiData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.PhiData.Blocks">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.PhiData.Operands">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.PhiInstruction">
            <summary>
            Used in the single static assignment form of the instruction stream to
            automatically select the appropriate value of a variable depending on the
            incoming edge.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PhiInstruction.#ctor">
            <summary>
            Initializes a new instance of Phicontext.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PhiInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PhiInstruction.Contains(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Determines whether [contains] [the specified CTX].
            </summary>
            <param name="ctx">The context.</param>
            <param name="operand">The operand.</param>
            <returns>
            	<c>true</c> if [contains] [the specified CTX]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PhiInstruction.AddValue(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Adds the value.
            </summary>
            <param name="ctx">The context.</param>
            <param name="edge">The edge.</param>
            <param name="op">The op.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.PopInstruction">
            <summary>
            Intermediate representation of a pop operation, that removes the topmost element from the stack and
            places it in the destination operand.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PopInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.PopInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PopInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.PrologueInstruction">
            <summary>
            An abstract intermediate representation of the method prologue.
            </summary>
            <remarks>
            This instruction is usually derived by the architecture and expanded appropriately
            for the calling convention of the method.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PrologueInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.PrologueInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PrologueInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.PushInstruction">
            <summary>
            Intermediate representation of a push instruction, that moves 
            its argument on the top of a stack.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PushInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.PushInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.PushInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ReturnInstruction">
            <summary>
            Intermediate representation of a method return context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ReturnInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.ReturnInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ReturnInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.IR.ReturnInstruction.FlowControl">
            <summary>
            Determines flow behavior of this context.
            </summary>
            <value></value>
            <remarks>
            Knowledge of control flow is required for correct basic block
            building. Any instruction that alters the control flow must override
            this property and correctly identify its control flow modifications.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ShiftLeftInstruction">
            <summary>
            Intermediate representation of the left shift operation.
            </summary>
            <remarks>
            The shift instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) shifted by the number of bits specified by
            the second operand (index 1).
            <para />
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ShiftLeftInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.ShiftLeftInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ShiftLeftInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ShiftRightInstruction">
            <summary>
            Intermediate representation of the shift right operation.
            </summary>
            <remarks>
            The shift instruction is a three-address instruction, where the result receives
            the value of the first operand (index 0) shifted by the number of bits specified by
            the second operand (index 1).
            <para/>
            Both the first and second operand must be the same integral type. If the second operand
            is statically or dynamically equal to or larger than the number of bits in the first
            operand, the result is undefined.
            <para/>
            The most significant bits will be filled with zeroes by this context. To preserve
            the sign of the shifted value (inserting ones if it is negative), use the 
            <see cref="T:Mosa.Compiler.Framework.IR.ArithmeticShiftRightInstruction"/> instead.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ShiftRightInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.ShiftRightInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ShiftRightInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.SignExtendedMoveInstruction">
            <summary>
            Intermediate representation of a signed conversion context.
            </summary>
            <remarks>
            This instruction takes the source operand and converts to the request size maintaining its sign.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SignExtendedMoveInstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.IR.SignExtendedMoveInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.SignExtendedMoveInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Implementation of the visitor pattern.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.StoreInstruction">
            <summary>
            Stores a value to a memory pointer.
            </summary>
            <remarks>
            The store instruction stores the value in the given memory pointer with offset. The first operand is the memory base pointer,
            the second an additional offset value and the third is the value to store.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.StoreInstruction.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.IR.StoreInstruction"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.StoreInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Visitor method for intermediate representation visitors.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.ZeroExtendedMoveInstruction">
            <summary>
            Intermediate representation of a signed conversion context.
            </summary>
            <remarks>
            This instruction takes the source operand and converts to the request size maintaining its sign.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IR.ZeroExtendedMoveInstruction.Visit(Mosa.Compiler.Framework.IR.IIRVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor object.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.IIRInstruction">
            <summary>
            Interface to a intermediary instruction (IR) instruction
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IPlatformInstruction">
            <summary>
            Interface to a platform instruction
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IPlatformInstruction.Emit(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.ICodeEmitter)">
            <summary>
            Emits the specified platform instruction.
            </summary>
            <param name="context">The context.</param>
            <param name="emitter">The emitter.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.IPlatformInstruction.Latency">
            <summary>
            Gets the instruction latency.
            </summary>
            <value>The latency.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.FlowGraphVisualizationStage">
            <summary>
            The FlowGraph Visualization Stage emits flowgraphs for graphviz.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowGraphVisualizationStage.arch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowGraphVisualizationStage.firstBlock">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowGraphVisualizationStage.workArray">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowGraphVisualizationStage.workList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowGraphVisualizationStage.methodCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowGraphVisualizationStage.dotFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowGraphVisualizationStage.Instance">
            <summary>
            A reference to the running instance of this stage
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.FlowGraphVisualizationStage.Run">
            <summary>
            Runs the specified compiler.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.FlowGraphVisualizationStage.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.FlowGraphVisualizationStage.Close">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CIL.NopInstruction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NopInstruction.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CIL.NopInstruction"/> class.
            </summary>
            <param name="opcode">The opcode.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CIL.NopInstruction.Visit(Mosa.Compiler.Framework.CIL.ICILVisitor,Mosa.Compiler.Framework.Context)">
            <summary>
            Allows visitor based dispatch for this instruction object.
            </summary>
            <param name="visitor">The visitor.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.InstructionSet">
            <summary>
            Class maintenances an array of sorted instruction
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionSet.Data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionSet._size">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionSet._next">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionSet._prev">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionSet._used">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionSet._free">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.InstructionSet"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.Resize(System.Int32)">
            <summary>
            Resizes the specified newsize.
            </summary>
            <param name="newsize">The newsize.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.Next(System.Int32)">
            <summary>
            Nexts the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.Previous(System.Int32)">
            <summary>
            Previouses the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.GetFree">
            <summary>
            Gets the free.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.CreateRoot">
            <summary>
            Creates the root.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.InsertAfter(System.Int32)">
            <summary>
            Inserts the after.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.InsertBefore(System.Int32)">
            <summary>
            Inserts the after.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.Remove(System.Int32)">
            <summary>
            Removes the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.SliceBefore(System.Int32)">
            <summary>
            Slices the instruction flow before the current instruction
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionSet.SliceAfter(System.Int32)">
            <summary>
            Slices the instruction flow after the current instruction
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionSet.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionSet.Used">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionSet.NextArray">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionSet.PrevArray">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.InstructionData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Instruction">
            <summary>
            Holds the instruction type of this instruction
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Label">
            <summary>
            Label of the instruction
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData._offset">
            <summary>
            Offset of the instruction from the start of the method.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Operand1">
            <summary>
            Holds the first operand of the instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Operand2">
            <summary>
            Holds the second operand of the instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Operand3">
            <summary>
            Holds the third operand of the instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Result">
            <summary>
            Holds the result operands of the instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Branch">
            <summary>
             Holds the branch target information
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData.Other">
            <summary>
            Holds the "other" object
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.InstructionData._packed">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionData.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionData.ClearAbbreviated">
            <summary>
            Clears the instance.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionData.SetAdditionalOperand(System.Int32,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Sets the addition operand.
            </summary>
            <param name="index">The index.</param>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionData.GetAdditionalOperand(System.Int32)">
            <summary>
            Gets the addition operand.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.InstructionData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.Ignore">
            <summary>
            Gets or sets the ignored attribute
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.HasPrefix">
            <summary>
            Gets or sets a value indicating whether this instance has prefix.
            </summary>
            <value>
            	<c>true</c> if this instance has prefix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.BranchHint">
            <summary>
            Gets or sets the branch hint (true means branch likely)
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.ResultCount">
            <summary>
            Gets or sets the number of operand results
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.OperandCount">
            <summary>
            Gets or sets the number of operands
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.Offset">
            <summary>
            Gets or sets the label of the instruction.
            </summary>
            <remarks>
            Offsets are used by branch instructions to define their target. During basic block
            building these offsets are used to insert labels at appropriate positions and the
            jumps or modified to target one of these labels. During code generation, the offset
            can be used to indicate native code offsets.
            </remarks>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.InvokeTarget">
            <summary>
            Gets or sets the invoke target.
            </summary>
            <value>The invoke target.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.RuntimeField">
            <summary>
            Gets or sets the runtime field.
            </summary>
            <value>The runtime field.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.Token">
            <summary>
            Holds the token type.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.TokenType">
            <summary>
            Holds the token type.
            </summary>
            <value>The token.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.ConditionCode">
            <summary>
            Gets or sets the condition code.
            </summary>
            <value>The condition code.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.InstructionData.LiteralData">
            <summary>
            Holds the literal data.
            </summary>
            <value>The token.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.StringOperand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.StringOperand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Operands.StringOperand"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.StringOperand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>
            The return value is true if the operands are equal; false if not.
            </returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.StringOperand.String">
            <summary>
            Gets or sets the string.
            </summary>
            <value>The string.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.ReverseBlockOrderStage">
            <summary>
            This class orders blocks in reverse order. This stage is used for testing.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ReverseBlockOrderStage.Run">
            <summary>
            Runs the specified compiler.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.RuntimeMethodData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.RuntimeMethodData.MaxOperands">
            <summary>
            Maximum number of additional operands
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.RuntimeMethodData.RuntimeMethod">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.RuntimeMethodData.AdditionalOperands">
            <summary>
            Contains the label to apply to the data.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.RuntimeMethodData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.RuntimeMethodData"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.RuntimeMethodData.#ctor(Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.RuntimeMethodData"/> class.
            </summary>
            <param name="runtimeMethod">The runtime method.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.StackRegisterAllocator">
            <summary>
            Allocates the registers according to the IL stack.
            </summary>
            <remarks>
            This is a very simple register allocator. It simulates the IL stack using the
            registers and native stack of the target architecture. Right now this allocator
            only supports x86 and is specifically designed to use an IL stack with the following
            properties:
            <para />
            - The EAX register always contains the topmost stack value. This implies that
              EAX is always the destination of any operation.
            <para />
            - The ECX holds the second to top stack value. This implies that most x86
              instructions will be in the format EAX = EAX op ECX, which incidentally matches 
              all x86 instructions, including shifts and divisions.
            <para />
            - For floating point arithmetic XMM#0 is used instead of EAX and XMM#1 is used instead of
              ECX.
            <para />
            - If a value is loaded onto the evaluation stack, the following sequence of instructions
              is emitted: push ecx, mov ecx, eax, [load] eax. This sequence is emitted depending on
              the state of the IL stack: An empty IL stack does not cause the first two instructions
              to be emitted, while a stack depth of 1 only causes the mov ecx, eax to be emitted.
            <para />
            - If a single value of the stack is used, the following sequence is emitted: 
              mov eax, ecx, pop ecx. The pop ecx is only emitted, if the IL stack size is larger than 1.
            <para />
            - If the two topmost values  of the stack are used, they are replaced by pop eax, pop ecx. 
              Again depending on the size of the IL stack.
            <para />
            - If the instruction pushes a result onto the stack, this result goes into EAX.
            <para />
            - EAX and ECX are not touched for floating point. They keep their last state.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackRegisterAllocator.RegisterStackSize">
            <summary>
            Holds the number of registers used for the evaluation stack.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackRegisterAllocator.evaluationStack">
            <summary>
            The evaluation stack.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackRegisterAllocator.stackRegistersFp">
            <summary>
            An array of register operands to hold the top of the evaluation stack for fp operands.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackRegisterAllocator.stackRegistersI">
            <summary>
            An array of register operands to hold the top of the evaluation stack for integer operands.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackRegisterAllocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.StackRegisterAllocator"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackRegisterAllocator.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackRegisterAllocator.PopOperands(Mosa.Compiler.Framework.Context)">
            <summary>
            Pops the operands of an instruction from the evaluation stack.
            </summary>
            <param name="ctx">The context.</param>
            <returns>The number of operands popped.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackRegisterAllocator.PrepareEvaluationStack(Mosa.Compiler.Framework.IArchitecture)">
            <summary>
            Prepares the evaluation stack.
            </summary>
            <param name="architecture">The architecture.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackRegisterAllocator.ProcessInstruction(Mosa.Compiler.Framework.Context)">
            <summary>
            Processes the instruction.
            </summary>
            <param name="ctx">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackRegisterAllocator.PushResults(Mosa.Compiler.Framework.Context,System.Int32)">
            <summary>
            Pushes the results of an instruction onto the evaluation stack.
            </summary>
            <param name="ctx">The context.</param>
            <param name="pops">The number of pops performed.</param>
            <returns>The number of pushes performed.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackRegisterAllocator.SyncEvalStack(System.Int32)">
            <summary>
            Synchronizes the eval stack after an instruction.
            </summary>
            <param name="entries">The number of stack entries to retrieve from the processor stack.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.StrengthReductionStage">
            <summary>
            Performs IR constant folding of arithmetic instructions to optimize
            the code down to fewer calculations.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Mul(Mosa.Compiler.Framework.Context)">
            <summary>
            Folds multiplication when one of the constants is zero
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.IsValueZero(Mosa.Compiler.Metadata.CilElementType,Mosa.Compiler.Framework.Operands.ConstantOperand)">
            <summary>
            Determines whether the value is zero.
            </summary>
            <param name="cilElementType">Type of the cil element.</param>
            <param name="constantOperand">The constant operand.</param>
            <returns>
            	<c>true</c> if the value is zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.IsValueOne(Mosa.Compiler.Metadata.CilElementType,Mosa.Compiler.Framework.Operands.ConstantOperand)">
            <summary>
            Determines whether the value is one.
            </summary>
            <param name="cilElementType">Type of the cil element.</param>
            <param name="constantOperand">The constant operand.</param>
            <returns>
            	<c>true</c> if the value is one; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Nop(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Nop(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Break(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Break(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldarg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldarg(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldarga(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldarga(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldloc(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldloca(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldloca(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldc(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldobj(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldstr(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldstr(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldfld(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldflda(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldflda(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldsfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldsfld(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldsflda(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldsflda(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldftn(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldftn(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldvirtftn(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldvirtftn(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldtoken(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldtoken(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Stloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stloc(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Starg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Starg(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Stobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stobj(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Stfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stfld(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Stsfld(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stsfld(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Dup(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Dup(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Pop(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Pop(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Jmp(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Jmp(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Call(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Call(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Calli(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Calli(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ret(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ret(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Branch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Branch(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#UnaryBranch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.UnaryBranch(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#BinaryBranch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.BinaryBranch(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Switch(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Switch(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#BinaryLogic(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.BinaryLogic(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Shift(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Shift(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Neg(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Neg(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Not(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Not(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Conversion(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Conversion(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Callvirt(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Callvirt(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Cpobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Cpobj(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Newobj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Newobj(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Castclass(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Castclass(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#IsInst(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.IsInst(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Unbox(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Unbox(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Throw(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Throw(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Box(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Box(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Newarr(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Newarr(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldlen(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldlen(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldelema(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldelema(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Ldelem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Ldelem(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Stelem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Stelem(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#UnboxAny(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.UnboxAny(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Refanyval(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Refanyval(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#UnaryArithmetic(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.UnaryArithmetic(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Mkrefany(Mosa.Compiler.Framework.Context)">
            <summary>
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#ArithmeticOverflow(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.ArithmeticOverflow(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Endfinally(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Endfinally(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Leave(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Leave(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Arglist(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Arglist(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#BinaryComparison(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.BinaryComparison(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Localalloc(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Localalloc(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Endfilter(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Endfilter(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#InitObj(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.InitObj(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Cpblk(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Cpblk(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Initblk(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Initblk(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Prefix(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Prefix(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Rethrow(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Rethrow(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Sizeof(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Sizeof(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Refanytype(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Refanytype(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Add(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Add(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Sub(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Sub(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Div(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Div(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StrengthReductionStage.Mosa#Compiler#Framework#CIL#ICILVisitor#Rem(Mosa.Compiler.Framework.Context)">
            <summary>
            Visitation function for <see cref="M:Mosa.Compiler.Framework.CIL.ICILVisitor.Rem(Mosa.Compiler.Framework.Context)"/>.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.SimpleTraceBlockOrderStage">
            <summary>
            The Simple Trace Block Order Stage reorders Blocks to optimize loops and reduce the distance of jumps and branches.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.SimpleTraceBlockOrderStage._ordered">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleTraceBlockOrderStage.Run">
            <summary>
            Runs the specified compiler.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleTraceBlockOrderStage.OrderBlocks">
            <summary>
            Orders the blocks.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.LoopAwareBlockOrderStage">
            <summary>
            The Loop Aware Block Ordering Stage reorders blocks to optimize loops and reduce the distance of jumps and branches.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LoopAwareBlockOrderStage._first">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LoopAwareBlockOrderStage._loops">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LoopAwareBlockOrderStage._depths">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LoopAwareBlockOrderStage._ordered">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.Run">
            <summary>
            Runs the specified compiler.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.DetermineLoopDepths">
            <summary>
            Determines the loop depths.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.DetermineBlockOrder">
            <summary>
            Determines the block order.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.OrderBlocks">
            <summary>
            Orders the blocks.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.OrderedBlocks">
            <summary>
            Gets the ordered Blocks.
            </summary>
            <value>The ordered Blocks.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.ConnectedBlocks">
            <summary>
            Pair of two Blocks; From/to 
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.ConnectedBlocks.to">
            <summary>
            Current Block
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.ConnectedBlocks.From">
            <summary>
            Succssor Block
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.ConnectedBlocks.#ctor(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.ConnectedBlocks"/> struct.
            </summary>
            <param name="from">From block.</param>
            <param name="to">To block.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.Priority.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.Priority"/> class.
            </summary>
            <param name="depth">The depth.</param>
            <param name="order">The order.</param>
            <param name="hinted">if set to <c>true</c> [hinted].</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LoopAwareBlockOrderStage.Priority.CompareTo(Mosa.Compiler.Framework.LoopAwareBlockOrderStage.Priority)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value
            Meaning
            Less than zero
            This object is less than the <paramref name="other"/> parameter.
            Zero
            This object is equal to <paramref name="other"/>.
            Greater than zero
            This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.LocalCSE">
            <summary>
            A stage to compute local common subexpression elimination
            according to Steven S. Muchnick, Advanced Compiler Design 
            and Implementation (Morgan Kaufmann, 1997) pp. 378-396
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LocalCSE.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LocalCSE.EliminateCommonSubexpressions(Mosa.Compiler.Framework.Context)">
            <summary>
            Eliminates the common subexpressions.
            </summary>
            <param name="ctx">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LocalCSE.IsCommutative(Mosa.Compiler.Framework.IInstruction)">
            <summary>
            Determines whether the specified instruction is commutative.
            </summary>
            <param name="instruction">The instruction.</param>
            <returns>
            	<c>true</c> if the specified instruction is commutative; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.LocalCSE.AEBinExp">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.AEBinExp.Position">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.AEBinExp.Operand1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.AEBinExp.Operator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.AEBinExp.Operand2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.AEBinExp.Var">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LocalCSE.AEBinExp.#ctor(System.Int32,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.LocalCSE.Operation,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.LocalCSE.AEBinExp"/> struct.
            </summary>
            <param name="pos">The pos.</param>
            <param name="op1">The op1.</param>
            <param name="opr">The opr.</param>
            <param name="op2">The op2.</param>
            <param name="var">The var.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.LocalCSE.Operation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.Operation.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.Operation.Add">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.Operation.Mul">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.Operation.And">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.Operation.Or">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LocalCSE.Operation.Xor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IMethodCompiler">
            <summary>
            Interface provided by method compilers.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.CreateTemporary(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Creates a new temporary variable operand.
            </summary>
            <param name="type">The signature type of the temporary.</param>
            <returns>An operand, which represents the temporary.</returns>
            <remarks>
            Later optimization stages attempt to optimize, reduce or remove the usage
            of temporaries in a program. Temporaries may be allocated to physical
            registers as part of register allocation strategies.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.GetInstructionStream">
            <summary>
            Provides access to the instructions of the method.
            </summary>
            <returns>A stream, which represents the IL of the method.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.GetLocalOperand(System.Int32)">
            <summary>
            Retrieves the local stack operand at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the local variable to retrieve.</param>
            <returns>The operand at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> is not valid.</exception>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.GetParameterOperand(System.Int32)">
            <summary>
            Creates a new temporary local variable operand.
            </summary>
            <param name="index">The index of the parameter to retrieve.</param>
            <returns>An operand, which represents the temporary.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.GetStage(System.Type)">
            <summary>
            Gets the stage.
            </summary>
            <param name="stageType">Type of the stage.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.RequestCodeStream">
            <summary>
            Requests a stream to emit native instructions to.
            </summary>
            <returns>A stream object, which can be used to store emitted instructions.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.SetLocalVariableSignature(Mosa.Compiler.Metadata.Signatures.LocalVariableSignature)">
            <summary>
            Sets the signature of local variables in the method.
            </summary>
            <param name="localVariableSignature">The local variable signature of the method.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.FromLabel(System.Int32)">
            <summary>
            Retrieves a basic block from its label.
            </summary>
            <param name="label">The label of the basic block.</param>
            <returns>The basic block with the given label or null.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.CreateBlock(System.Int32,System.Int32)">
            <summary>
            Creates the block.
            </summary>
            <param name="label">The label.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IMethodCompiler.Compile">
            <summary>
            Compiles the method.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.Architecture">
            <summary>
            Retrieves the architecture to compile for.
            </summary>
            <value>The compilation target architecture. This may differ from the current execution architecture.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.Assembly">
            <summary>
            Gets the metadata module being compiled.
            </summary>
            <value>The currently compiled module.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.Linker">
            <summary>
            Retrieves the linker used to resolve external symbols.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.Method">
            <summary>
            Retrieves the method being compiled.
            </summary>
            <value>The method being compiled.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.Scheduler">
            <summary>
            Retrieves the compilation scheduler.
            </summary>
            <value>The compilation scheduler.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.InstructionSet">
            <summary>
            Gets the instruction set.
            </summary>
            <value>The instruction set.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.BasicBlocks">
            <summary>
            Gets the basic Blocks.
            </summary>
            <value>The basic Blocks.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.Pipeline">
            <summary>
            Provides access to the pipeline of this compiler.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.TypeSystem">
            <summary>
            Gets the type system.
            </summary>
            <value>The type system.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.TypeLayout">
            <summary>
            Gets the type layout.
            </summary>
            <value>The type layout.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.InternalLog">
            <summary>
            Gets the internal logging interface
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.IMethodCompiler.ExceptionClauseHeader">
            <summary>
            Gets the exception clause header.
            </summary>
            <value>The exception clause header.</value>
        </member>
        <member name="T:Mosa.Compiler.Linker.BaseAssemblyLinkerStage">
            <summary>
            This compilation stage links all external labels together, which were previously registered.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.baseAddress">
            <summary>
            Holds the base virtualAddress of the link result.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.entryPoint">
            <summary>
            Holds the entry point of the compiled binary.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.linkRequests">
            <summary>
            Holds all unresolved link requests.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.outputFile">
            <summary>
            Holds the output file of the linker.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.symbols">
            <summary>
            A dictionary containing all symbol seen in the assembly.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Linker.BaseAssemblyLinkerStage"/>.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.ApplyPatch(Mosa.Compiler.Linker.LinkType,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            A request to patch already emitted code by storing the calculated virtualAddress value.
            </summary>
            <param name="linkType">Type of the link.</param>
            <param name="methodAddress">The method address.</param>
            <param name="methodOffset">The value to store at the position in code.</param>
            <param name="methodRelativeBase">The method relative base.</param>
            <param name="targetAddress">The position in code, where it should be patched.</param>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.Allocate(System.String,Mosa.Compiler.Linker.SectionKind,System.Int32,System.Int32)">
            <summary>
            Allocates a symbol of the given name in the specified section.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="section">The executable section to allocate From.</param>
            <param name="size">The number of bytes to allocate. If zero, indicates an unknown amount of memory is required.</param>
            <param name="alignment">The alignment. A value of zero indicates the use of a default alignment for the section.</param>
            <returns>
            A stream, which can be used to populate the section.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.Allocate(Mosa.Compiler.Linker.SectionKind,System.Int32,System.Int32)">
            <summary>
            Allocates a symbol of the given name in the specified section.
            </summary>
            <param name="section">The executable section to allocate From.</param>
            <param name="size">The number of bytes to allocate. If zero, indicates an unknown amount of memory is required.</param>
            <param name="alignment">The alignment. A value of zero indicates the use of a default alignment for the section.</param>
            <returns>
            A stream, which can be used to populate the section.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.GetSection(Mosa.Compiler.Linker.SectionKind)">
            <summary>
            Gets the section.
            </summary>
            <param name="sectionKind">Kind of the section.</param>
            <returns>The section of the requested kind.</returns>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.GetSymbol(System.String)">
            <summary>
            Retrieves a linker symbol.
            </summary>
            <param name="symbolName">The name of the symbol to retrieve.</param>
            <returns>The named linker symbol.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="symbolName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">There's no symbol of the given name.</exception>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.HasSymbol(System.String)">
            <summary>
            Determines if a given symbol name is already in use by the linker.
            </summary>
            <param name="symbolName">The symbol name.</param>
            <returns><c>true</c> if the symbol name is already used; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.Link(Mosa.Compiler.Linker.LinkType,System.String,System.Int32,System.Int32,System.String,System.IntPtr)">
            <summary>
            Issues a linker request for the given runtime method.
            </summary>
            <param name="linkType">The type of link required.</param>
            <param name="symbolName">The method the patched code belongs to.</param>
            <param name="methodOffset">The offset inside the method where the patch is placed.</param>
            <param name="methodRelativeBase">The base virtualAddress, if a relative link is required.</param>
            <param name="targetSymbol">The linker symbol to link against.</param>
            <param name="offset">An offset to apply to the link target.</param>
            <returns>
            The return value is the preliminary virtualAddress to place in the generated machine
            code. On 32-bit systems, only the lower 32 bits are valid. The above are not used. An implementation of
            IAssemblyLinker may not rely on 64-bits being stored in the memory defined by position.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.IsResolved(System.String,System.Int64@)">
            <summary>
            Determines whether the specified symbol is resolved.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="virtualAddress">The virtualAddress.</param>
            <returns>
            	<c>true</c> if the specified symbol is resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.IsValid(Mosa.Compiler.TypeSystem.RuntimeMember)">
            <summary>
            Checks that <paramref name="member"/> is a member, which can be linked.
            </summary>
            <param name="member">The member to check.</param>
            <returns>
            True, if the member is valid for linking.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.PatchRequests(System.Int64,System.Collections.Generic.IEnumerable{Mosa.Compiler.Linker.LinkRequest})">
            <summary>
            Patches all requests in the given link request list.
            </summary>
            <param name="virtualAddress">The virtualAddress of the member.</param>
            <param name="requests">A list of requests to patch.</param>
        </member>
        <member name="P:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.BaseAddress">
            <summary>
            Gets the base virtualAddress.
            </summary>
            <value>The base virtualAddress.</value>
        </member>
        <member name="P:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.EntryPoint">
            <summary>
            Gets the entry point symbol.
            </summary>
            <value>The entry point symbol.</value>
        </member>
        <member name="P:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.LoadSectionAlignment">
            <summary>
            Gets the load alignment of sections.
            </summary>
            <value>The load alignment.</value>
        </member>
        <member name="P:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.OutputFile">
            <summary>
            Gets or sets the output file of the linker.
            </summary>
            <value>The output file.</value>
        </member>
        <member name="P:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.Sections">
            <summary>
            Retrieves the collection of sections created during compilation.
            </summary>
            <value>The sections collection.</value>
        </member>
        <member name="P:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.Symbols">
            <summary>
            Retrieves the collection of _symbols known by the linker.
            </summary>
            <value>The symbol collection.</value>
        </member>
        <member name="P:Mosa.Compiler.Linker.BaseAssemblyLinkerStage.VirtualSectionAlignment">
            <summary>
            Gets the virtual alignment of sections.
            </summary>
            <value>The virtual section alignment.</value>
        </member>
        <member name="T:Mosa.Compiler.Linker.LinkerGeneratedMethod">
            <summary>
            Represents compiler generated methods.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Linker.LinkerGeneratedMethod.#ctor(Mosa.Compiler.TypeSystem.ITypeModule,System.String,Mosa.Compiler.TypeSystem.RuntimeType,Mosa.Compiler.Metadata.Signatures.MethodSignature)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Linker.LinkerGeneratedMethod"/> class.
            </summary>
            <param name="typeSystem">The type system.</param>
            <param name="name">The name of the method.</param>
            <param name="declaringType">Type of the declaring.</param>
        </member>
        <member name="T:Mosa.Compiler.Linker.LinkerGeneratedType">
            <summary>
            Represents a compiler generated type.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Linker.LinkerGeneratedType.#ctor(Mosa.Compiler.TypeSystem.ITypeModule,System.String,System.String,Mosa.Compiler.TypeSystem.RuntimeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Linker.LinkerGeneratedType"/> class.
            </summary>
            <param name="moduleTypeSystem">The module type system.</param>
            <param name="nameSpace">The name space.</param>
            <param name="name">The name.</param>
            <param name="baseType">Type of the base.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.BaseMethodCompiler">
            <summary>
            Base class of a method compiler.
            </summary>
            <remarks>
            A method compiler is responsible for compiling a single function
            of an object. There are various classes derived from BaseMethodCompiler,
            which provide specific features, such as jit compilation, runtime
            optimized jitting and others. MethodCompilerBase instances are usually
            created by invoking CreateMethodCompiler on a specific compiler
            instance.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.pipeline">
            <summary>
            Holds the pipeline of the compiler.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.parameters">
            <summary>
            Holds a list of operands which represent method parameters.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.compilationScheduler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.architecture">
            <summary>
            The Architecture of the compilation target.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.linker">
            <summary>
            Holds the linker used to resolve external symbols
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.locals">
            <summary>
            Holds a list of operands which represent local variables
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.localsSig">
            <summary>
            Optional signature of stack local variables
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.method">
            <summary>
            The method definition being compiled
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.nextStackSlot">
            <summary>
            Holds the next free stack slot index
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.type">
            <summary>
            Holds the type, which owns the method
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.instructionSet">
            <summary>
            Holds the instruction set
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.basicBlocks">
            <summary>
            Holds the basic blocks
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.typeSystem">
            <summary>
            Holds the type system during compilation
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.typeLayout">
            <summary>
            Holds the type layout interface
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.moduleTypeSystem">
            <summary>
            Holds the modules type system
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.internalLog">
            <summary>
            Holds the internal logging interface
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.basicBlocksByLabel">
            <summary>
            Holds the blocks indexed by label
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BaseMethodCompiler.exceptionClauseHeader">
            <summary>
            Holds the exception clauses
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.#ctor(Mosa.Compiler.TypeSystem.RuntimeType,Mosa.Compiler.TypeSystem.RuntimeMethod,Mosa.Compiler.Linker.IAssemblyLinker,Mosa.Compiler.Framework.IArchitecture,Mosa.Compiler.TypeSystem.ITypeSystem,Mosa.Compiler.TypeSystem.ITypeLayout,Mosa.Compiler.Framework.InstructionSet,Mosa.Compiler.Framework.ICompilationSchedulerStage,Mosa.Compiler.InternalTrace.IInternalTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.BaseMethodCompiler"/> class.
            </summary>
            <param name="linker">The _linker.</param>
            <param name="architecture">The target compilation Architecture.</param>
            <param name="type">The type, which owns the method to compile.</param>
            <param name="method">The method to compile by this instance.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.RequestCodeStream">
            <summary>
            Requests a stream to emit native instructions to.
            </summary>
            <returns>A stream object, which can be used to store emitted instructions.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.Compile">
            <summary>
            Compiles the method referenced by this method compiler.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.CreateResultOperand(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Creates a result operand for an instruction.
            </summary>
            <param name="type">The signature type of the operand to be created.</param>
            <returns>A new temporary result operand.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.CreateTemporary(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Creates a new temporary local variable operand.
            </summary>
            <param name="type">The signature _type of the temporary.</param>
            <returns>An operand, which represents the temporary.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.GetInstructionStream">
            <summary>
            Provides access to the instructions of the method.
            </summary>
            <returns>A stream, which represents the IL of the method.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.GetLocalOperand(System.Int32)">
            <summary>
            Retrieves the local stack operand at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the stack operand to retrieve.</param>
            <returns>The operand at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> is not valid.</exception>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.GetParameterOperand(System.Int32)">
            <summary>
            Retrieves the parameter operand at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the parameter operand to retrieve.</param>
            <returns>The operand at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index"/> is not valid.</exception>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.SetLocalVariableSignature(Mosa.Compiler.Metadata.Signatures.LocalVariableSignature)">
            <summary>
            Sets the signature of local variables in the method.
            </summary>
            <param name="localVariableSignature">The local variable signature of the _method.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.BeginCompile">
            <summary>
            Called before the method compiler begins compiling the method.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.EndCompile">
            <summary>
            Called after the method compiler has finished compiling the method.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.GetStage(System.Type)">
            <summary>
            Gets the stage.
            </summary>
            <param name="stageType">Type of the stage.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.FromLabel(System.Int32)">
            <summary>
            Retrieves a basic block From its label.
            </summary>
            <param name="label">The label of the basic block.</param>
            <returns>
            The basic block with the given label.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BaseMethodCompiler.CreateBlock(System.Int32,System.Int32)">
            <summary>
            Creates the block.
            </summary>
            <param name="label">The label.</param>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.Architecture">
            <summary>
            Gets the Architecture to compile for.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.Assembly">
            <summary>
            Gets the assembly, which contains the method.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.Linker">
            <summary>
            Gets the linker used to resolve external symbols.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.Method">
            <summary>
            Gets the method implementation being compiled.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.Type">
            <summary>
            Gets the owner type of the method.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.InstructionSet">
            <summary>
            Gets the instruction set.
            </summary>
            <value>The instruction set.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.BasicBlocks">
            <summary>
            Gets the basic blocks.
            </summary>
            <value>The basic blocks.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.Scheduler">
            <summary>
            Retrieves the compilation scheduler.
            </summary>
            <value>The compilation scheduler.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.Pipeline">
            <summary>
            Provides access to the pipeline of this compiler.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.TypeSystem">
            <summary>
            Gets the type system.
            </summary>
            <value>The type system.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.TypeLayout">
            <summary>
            Gets the type layout.
            </summary>
            <value>The type layout.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.InternalLog">
            <summary>
            Gets the internal logging interface
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.ExceptionClauseHeader">
            <summary>
            Gets the exception clause header.
            </summary>
            <value>The exception clause header.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BaseMethodCompiler.LocalVariables">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Linker.LinkerMethodCompiler.#ctor(Mosa.Compiler.Framework.AssemblyCompiler,Mosa.Compiler.Framework.ICompilationSchedulerStage,Mosa.Compiler.TypeSystem.RuntimeMethod,Mosa.Compiler.Framework.InstructionSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Linker.LinkerMethodCompiler"/> class.
            </summary>
            <param name="compiler">The assembly compiler executing this method compiler.</param>
            <param name="method">The metadata of the method to compile.</param>
            <param name="instructionSet">The instruction set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="compiler"/>, <paramref name="method"/> or <paramref name="instructionSet"/> is null.</exception>
        </member>
        <member name="T:Mosa.Compiler.Linker.LinkTimeCodeGenerator">
            <summary>
            Performs link time code generation for various parts of mosacl.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Linker.LinkTimeCodeGenerator.Compile(Mosa.Compiler.Framework.AssemblyCompiler,System.String,Mosa.Compiler.TypeSystem.ITypeSystem)">
            <summary>
            Link time code generator used to compile dynamically created methods during link time.
            </summary>
            <param name="compiler">The assembly compiler used to compile this method.</param>
            <param name="methodName">The name of the created method.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="compiler"/> or <paramref name="methodName"/>  is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is invalid.</exception>
        </member>
        <member name="M:Mosa.Compiler.Linker.LinkTimeCodeGenerator.Compile(Mosa.Compiler.Framework.AssemblyCompiler,System.String,Mosa.Compiler.Framework.InstructionSet,Mosa.Compiler.TypeSystem.ITypeSystem)">
            <summary>
            Link time code generator used to compile dynamically created methods during link time.
            </summary>
            <param name="compiler">The assembly compiler used to compile this method.</param>
            <param name="methodName">The name of the created method.</param>
            <param name="instructionSet">The instruction set.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="compiler"/>, <paramref name="methodName"/> or <paramref name="instructionSet"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is invalid.</exception>
        </member>
        <member name="T:Mosa.Compiler.Framework.AssemblyCompiler">
            <summary>
            Base class for just-in-time and ahead-of-time compilers, which use
            the Mosa.Compiler.Framework framework.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.AssemblyCompiler.architecture">
            <summary>
            The compiler target architecture.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.AssemblyCompiler.pipeline">
            <summary>
            The pipeline of the assembly compiler.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.AssemblyCompiler.typeSystem">
            <summary>
            Holds the current type system during compilation.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.AssemblyCompiler.typeLayout">
            <summary>
            Holds the current type layout during complication
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.AssemblyCompiler.internalTrace">
            <summary>
            Holds the current internal log
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.AssemblyCompiler.compilerOptions">
            <summary>
            Holds the compiler option set
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.AssemblyCompiler.#ctor(Mosa.Compiler.Framework.IArchitecture,Mosa.Compiler.TypeSystem.ITypeSystem,Mosa.Compiler.TypeSystem.ITypeLayout,Mosa.Compiler.InternalTrace.IInternalTrace,Mosa.Compiler.Framework.CompilerOptions)">
            <summary>
            Initializes a new compiler instance.
            </summary>
            <param name="architecture">The compiler target architecture.</param>
            <param name="typeSystem">The type system.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.AssemblyCompiler.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.AssemblyCompiler.CreateMethodCompiler(Mosa.Compiler.Framework.ICompilationSchedulerStage,Mosa.Compiler.TypeSystem.RuntimeType,Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Creates a method compiler
            </summary>
            <param name="schedulerStage">The scheduler stage.</param>
            <param name="type">The type.</param>
            <param name="method">The method to compile.</param>
            <returns>
            An instance of a MethodCompilerBase for the given type/method pair.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.AssemblyCompiler.Compile">
            <summary>
            Executes the compiler using the configured stages.
            </summary>
            <remarks>
            The method iterates the compilation stage chain and runs each 
            stage on the input.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.AssemblyCompiler.BeginCompile">
            <summary>
            Called when compilation is about to begin.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.AssemblyCompiler.EndCompile">
            <summary>
            Called when compilation has completed.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.AssemblyCompiler.Architecture">
            <summary>
            Returns the architecture used by the compiler.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.AssemblyCompiler.Pipeline">
            <summary>
            Gets the pipeline.
            </summary>
            <value>The pipeline.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.AssemblyCompiler.TypeSystem">
            <summary>
            Gets the type system.
            </summary>
            <value>The type system.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.AssemblyCompiler.TypeLayout">
            <summary>
            Gets the type layout.
            </summary>
            <value>The type layout.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.AssemblyCompiler.InternalTrace">
            <summary>
            Gets the internal log.
            </summary>
            <value>The internal log.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.AssemblyCompiler.CompilerOptions">
            <summary>
            Gets the compiler options.
            </summary>
            <value>The compiler options.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.BasicArchitecture">
            <summary>
            Implements a basic framework for architectures.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IArchitecture">
            <summary>
            Interface to allow compiler stages to perform architecture specific operations.
            </summary>
            <remarks>
            The functions in this interface are required to perform architecture specific
            optimizations in previous stages.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.IArchitecture.GetCallingConvention">
            <summary>
            Retrieves an object, that is able to translate the CIL calling convention into appropriate native code.
            </summary>
            <returns>A calling convention implementation.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IArchitecture.ExtendAssemblyCompilerPipeline(Mosa.Compiler.Framework.CompilerPipeline)">
            <summary>
            Requests the architecture to add architecture specific compilation stages to the assembly compiler 
            pipeline. These may depend upon the current state of the pipeline.
            </summary>
            <param name="assemblyPipeline">
            The pipeline of the assembly compiler to add architecture specific compilation stages to.
            </param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IArchitecture.ExtendMethodCompilerPipeline(Mosa.Compiler.Framework.CompilerPipeline)">
            <summary>
            Requests the architecture to add architecture specific compilation stages to the pipeline. These
            may depend upon the current state of the pipeline.
            </summary>
            <param name="methodPipeline">
            The pipeline of the method compiler to add architecture specific compilation stages to.
            </param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IArchitecture.CreateResultOperand(Mosa.Compiler.Metadata.Signatures.SigType,System.Int32,System.Int32)">
            <summary>
            Factory method for result operands of instructions.
            </summary>
            <param name="type">The data type held in the result operand.</param>
            <param name="label">The label.</param>
            <param name="index">The index.</param>
            <returns>
            The operand, which holds the instruction result.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IArchitecture.GetTypeRequirements(Mosa.Compiler.Metadata.Signatures.SigType,System.Int32@,System.Int32@)">
            <summary>
            Gets the type memory requirements.
            </summary>
            <param name="type">The signature type.</param>
            <param name="size">Receives the memory size of the type.</param>
            <param name="alignment">Receives alignment requirements of the type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IArchitecture.GetIntrinsicMethod(System.Type)">
            <summary>
            Gets the intrinsic instruction by type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IArchitecture.GetCodeEmitter">
            <summary>
            Gets the code emitter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.IArchitecture.NativeType">
            <summary>
            Returns the type, which represents a native (unsigned) int on the VES stack.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IArchitecture.RegisterSet">
            <summary>
            Returns the entire register set of the architecture.
            </summary>
            <remarks>
            Returns an array of Register classes, which represent the register set of
            the target machine.
            </remarks>
        </member>
        <member name="P:Mosa.Compiler.Framework.IArchitecture.StackFrameRegister">
            <summary>
            Returns the stack frame register of the architecture.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicArchitecture.nativeType">
            <summary>
            Holds the native type of the architecture.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicArchitecture.ExtendAssemblyCompilerPipeline(Mosa.Compiler.Framework.CompilerPipeline)">
            <summary>
            Extends the assembly compiler pipeline with architecture specific assembly compiler stages.
            </summary>
            <param name="assemblyPipeline">The pipeline to extend.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicArchitecture.ExtendMethodCompilerPipeline(Mosa.Compiler.Framework.CompilerPipeline)">
            <summary>
            Requests the architecture to add architecture specific compilation stages to the pipeline. These
            may depend upon the current state of the pipeline.
            </summary>
            <param name="methodPipeline">The pipeline of the method compiler to add architecture specific compilation stages to.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicArchitecture.GetCallingConvention">
            <summary>
            Retrieves an object, that is able to translate the CIL calling convention into appropriate native code.
            </summary>
            <returns>A calling convention implementation.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicArchitecture.GetTypeRequirements(Mosa.Compiler.Metadata.Signatures.SigType,System.Int32@,System.Int32@)">
            <summary>
            Gets the type memory requirements.
            </summary>
            <param name="type">The signature type.</param>
            <param name="size">Receives the memory size of the type.</param>
            <param name="alignment">Receives alignment requirements of the type.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicArchitecture.CreateResultOperand(Mosa.Compiler.Metadata.Signatures.SigType,System.Int32,System.Int32)">
            <summary>
            Factory method for result operands of instructions.
            </summary>
            <param name="type">The data type held in the result operand.</param>
            <param name="label">The label.</param>
            <param name="index">The index.</param>
            <returns>
            The operand, which holds the instruction result.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicArchitecture.GetIntrinsicMethod(System.Type)">
            <summary>
            Gets the intrinsic instruction by type
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicArchitecture.GetCodeEmitter">
            <summary>
            Gets the code emitter.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicArchitecture.NativeIntegerSize">
            <summary>
            Gets the width of a native integer in bits.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicArchitecture.RegisterSet">
            <summary>
            Gets the register set of the architecture.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicArchitecture.StackFrameRegister">
            <summary>
            Gets the stack frame register of the architecture.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicArchitecture.NativeType">
            <summary>
            Gets the signature type of the native integer.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.BasicBlock">
            <summary>
            Represents a block of instructions with no internal jumps and only one
            entry and exit.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlock.index">
            <summary>
            The index of the block within the instruction set
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlock.label">
            <summary>
            The label of the block. (For simplicity this is actually the original instruction offset.)
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlock.sequence">
            <summary>
            The creation sequence number of the block; unique within a method. (For use with stage that require an integer id for blocks starting from 0).
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlock.hintTarget">
            <summary>
            Hints at which target the block will most likely branch to
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlock.nextBlocks">
            <summary>
            Links this block to all Blocks invoked by the final branch instruction.
            </summary>
            <remarks>
            Usually there are two Blocks in this list: The branch destination and
            the immediately following block. If the final branch instruction is a
            switch, there are potentially more Blocks in this list.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.BasicBlock.previousBlocks">
            <summary>
            A list of all Blocks, whose final branch instruction refers to this block.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicBlock.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes common fields of the BasicBlock.
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="label">The label.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.BasicBlock.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>The code as a string value.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.Index">
            <summary>
            The index of the block within the instruction set
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.Label">
            <summary>
            Retrieves the label, which uniquely identifies this block.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.Sequence">
            <summary>
            Retrieves the label, which uniquely identifies this block.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.NextBlocks">
            <summary>
            Returns a list of all Blocks, which are potential branch targets
            of the last instruction in this block.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.PreviousBlocks">
            <summary>
            Returns a list of all Blocks, which branch to this block.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.HasNextBlocks">
            <summary>
            <True/> if this Block has following blocks
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.HasPreviousBlocks">
            <summary>
            <True/> if this Block has previous blocks
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.BasicBlock.HintTarget">
            <summary>
            Hints at which target the block will most likely branch to
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CodeGenerationStage">
            <summary>
            Base class for code generation stages.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.ICodeGenerationStage">
            <summary>
            Dummy marker interface
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CodeGenerationStage.codeStream">
            <summary>
            Holds the stream, where code is emitted to.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CodeGenerationStage.codeEmitter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CodeGenerationStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CodeGenerationStage.EmitInstructions">
            <summary>
            Called to emit a list of instructions offered by the instruction provider.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CodeGenerationStage.BeginGenerate">
            <summary>
            Begins the generate.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CodeGenerationStage.BlockStart(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Start of code generation for a block.
            </summary>
            <param name="block">The started block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CodeGenerationStage.BlockEnd(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Completion of code generation for a block.
            </summary>
            <param name="block">The completed block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CodeGenerationStage.EndGenerate">
            <summary>
            Code generation completed.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.CompilationException">
            <summary>
            Base class for all compiler and linker exceptions.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CompilationException"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CompilationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CompilationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CompilationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Mosa.Compiler.Framework.CompilerPipeline">
            <summary>
            Container class used to define the pipeline of a compiler.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.CompilerPipeline.pipeline">
            <summary>
            The stages in the compiler pipeline.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.CompilerPipeline"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.Add(Mosa.Compiler.Framework.IPipelineStage)">
            <summary>
            Adds the specified stage.
            </summary>
            <param name="stage">The stage.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.InsertAfterFirst``1(Mosa.Compiler.Framework.IPipelineStage)">
            <summary>
            Inserts the stage after StageType
            </summary>
            <typeparam name="StageType">The type of stage.</typeparam>
            <param name="stage">The stage.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.InsertAfterLast``1(Mosa.Compiler.Framework.IPipelineStage)">
            <summary>
            Inserts the stage after StageType
            </summary>
            <typeparam name="StageType">The type of stage.</typeparam>
            <param name="stage">The stage.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.InsertAfterLast``1(System.Collections.Generic.IEnumerable{Mosa.Compiler.Framework.IPipelineStage})">
            <summary>
            Inserts the stage after StageType
            </summary>
            <typeparam name="StageType">The type of stage.</typeparam>
            <param name="stages">The stages.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.InsertBefore``1(Mosa.Compiler.Framework.IPipelineStage)">
            <summary>
            Inserts the stage before StageType
            </summary>
            <typeparam name="StageType">The type of stage.</typeparam>
            <param name="stage">The stage.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.AddRange(System.Collections.Generic.IEnumerable{Mosa.Compiler.Framework.IPipelineStage})">
            <summary>
            Adds the range.
            </summary>
            <param name="stages">The stages.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.Remove(Mosa.Compiler.Framework.IPipelineStage)">
            <summary>
            Removes the specified stage.
            </summary>
            <param name="stage">The stage.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.CompilerPipeline.FindFirst``1">
            <summary>
            Finds this instance.
            </summary>
            <typeparam name="StageType">The type of the tage type.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerPipeline.Count">
            <summary>
            Returns the number of stages in the compiler pipeline.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.CompilerPipeline.Item(System.Int32)">
            <summary>
            Retrieves the indexed compilation stage.
            </summary>
            <param name="index">The index of the compilation stage to return.</param>
            <returns>The compilation stage at the requested index.</returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.ConstantOperand">
            <summary>
            Represent a constant operand.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.ConstantOperand._value">
            <summary>
            Constant value.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ConstantOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Operands.ConstantOperand"/> class.
            </summary>
            <param name="typeRef">The type ref.</param>
            <param name="value">The value of the contant.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ConstantOperand.FromValue(System.Int32)">
            <summary>
            Creates a new <see cref="T:Mosa.Compiler.Framework.Operands.ConstantOperand"/> for the given integral value.
            </summary>
            <param name="value">The value to create the constant operand for.</param>
            <returns>A new ConstantOperand representing the value <paramref name="value"/>.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ConstantOperand.GetNull">
            <summary>
            Retrieves a constant operand to represent the null-value.
            </summary>
            <returns>A new instance of <see cref="T:Mosa.Compiler.Framework.Operands.ConstantOperand"/>, that represents the null value.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ConstantOperand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>The return value is true if the operands are equal; false if not.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ConstantOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.ConstantOperand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.ConstantOperand.Value">
            <summary>
            Returns the value of the constant.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.ConstantPropagationStage">
            <summary>
            This method compiler stage performs constant propagation, e.g. it removes
            local variables in favor of constants.
            </summary>
            <remarks>
            Constant propagation has a couple of advantages: First of all it removes
            a local variable from the stack and secondly it reduces the register pressure
            on systems with only a small number of registers (x86).
            <para/>
            It is only safe to use this stage on an instruction stream in SSA form.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.ConstantPropagationStage.stage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ConstantPropagationStage.propagated">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.ConstantPropagationStage"/> class.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.#ctor(Mosa.Compiler.Framework.ConstantPropagationStage.PropagationStage)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.ConstantPropagationStage"/> class.
            </summary>
            <param name="stage">The stage.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.CheckResultsAreBuiltin(Mosa.Compiler.Framework.Operands.SsaOperand)">
            <summary>
            Checks for by ref.
            </summary>
            <param name="sop">The sop.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.CheckOperand(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Checks the operand.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.InstructionUsesOperand(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.SsaOperand)">
            <summary>
            Instructions the uses operand.
            </summary>
            <param name="ctx">The CTX.</param>
            <param name="sop">The sop.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.ReplaceUses(Mosa.Compiler.Framework.Operands.SsaOperand,Mosa.Compiler.Framework.Operands.ConstantOperand)">
            <summary>
            Replaces the uses.
            </summary>
            <param name="sop">The sop.</param>
            <param name="constantOperand">The constant operand.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ConstantPropagationStage.IsBuiltinType(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Determines whether [is builtin type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if [is builtin type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.ConstantPropagationStage.PropagationStage">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ConstantPropagationStage.PropagationStage.PreFolding">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.ConstantPropagationStage.PropagationStage.PostFolding">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.DominanceCalculationStage">
            <summary>
            Performs dominance calculations on basic Blocks built by a previous compilation stage.
            </summary>
            <remarks>
            The stage exposes the IDominanceProvider interface for other compilation stages to allow
            them to use the calculated dominance properties.
            <para/>
            The implementation is based on "A Simple, Fast Dominance Algorithm" by Keith D. Cooper, 
            Timothy J. Harvey, and Ken Kennedy, Rice University in Houston, Texas, USA.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.IDominanceProvider">
            <summary>
            A dominance provider allows other compilation stages to retrieve dominance relationships.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IDominanceProvider.GetImmediateDominator(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Retrieves the immediate dominator of a block.
            </summary>
            <param name="block">The block to retrieve the immediate dominator for.</param>
            <returns>The immediate dominator of the block.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IDominanceProvider.GetDominators(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Retrieves the dominators of the given block.
            </summary>
            <param name="block">The block to retrieve dominators for.</param>
            <returns>An array of dominators of a block. The first element (at index zero) is the block itself.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IDominanceProvider.GetDominanceFrontier">
            <summary>
            Retrieves the Blocks which are in the dominance frontier of any other block.
            </summary>
            <returns>All Blocks which are in a dominance frontier of another block.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IDominanceProvider.GetDominanceFrontierOfBlock(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Retrieves the dominance frontier of the given block.
            </summary>
            <param name="block">The block to return the dominance frontier of.</param>
            <returns>An array of Blocks, which represent the dominance frontier.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IDominanceProvider.GetChildren(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IDominanceProvider.IteratedDominanceFrontier(System.Collections.Generic.List{Mosa.Compiler.Framework.BasicBlock})">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="F:Mosa.Compiler.Framework.DominanceCalculationStage._doms">
            <summary>
            Holds the dominance information of a block.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DominanceCalculationStage._domFrontier">
            <summary>
            Holds the dominance frontier Blocks.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DominanceCalculationStage._domFrontierOfBlock">
            <summary>
            Holds the dominance frontier of individual Blocks.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.DominanceCalculationStage._children">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.DominanceCalculationStage.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.DominanceCalculationStage.CalculateDominance">
            <summary>
            Calculates the immediate dominance of all Blocks in the block provider.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.DominanceCalculationStage.CalculateDominanceFrontier">
            <summary>
            Calculates the dominance frontier of all Blocks in the block list.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.DominanceCalculationStage.Mosa#Compiler#Framework#IDominanceProvider#IteratedDominanceFrontier(System.Collections.Generic.List{Mosa.Compiler.Framework.BasicBlock})">
            <summary>
            Iterateds the dominance frontier.
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.DominanceCalculationStage.Intersect(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Retrieves the highest common immediate dominator of the two given Blocks.
            </summary>
            <param name="b1">The first basic block.</param>
            <param name="b2">The second basic block.</param>
            <returns>The highest common dominator.</returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.FlowControl">
            <summary>
            Specifies flow-control properties of an instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Next">
            <summary>
            The instruction always continues execution on the next instruction.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Call">
            <summary>
            The instruction invokes another method.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Branch">
            <summary>
            The instruction is an unconditional branch.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.ConditionalBranch">
            <summary>
            The instruction is a conditional branch, which never falls through.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Switch">
            <summary>
            The instruction is a conditional branch, which may fall-through.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Break">
            <summary>
            The instruction breaks the control-flow.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Return">
            <summary>
            The instruction returns from the method
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Throw">
            <summary>
            The instruction throws an exception.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.Leave">
            <summary>
            Leaves a try block
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.FlowControl.EndFinally">
            <summary>
            End of finally block
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.ICallingConvention">
            <summary>
            This interface provides support to emit calling convention 
            specific code.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ICallingConvention.MakeCall(Mosa.Compiler.Framework.Context)">
            <summary>
            Expands method call instruction represented by the context to perform the method call.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ICallingConvention.GetStackRequirements(Mosa.Compiler.Framework.Operands.StackOperand,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the stack requirements of a stack operand.
            </summary>
            <param name="stackOperand">The operand to calculate the stack requirements for.</param>
            <param name="size">Receives the size of the operand in bytes.</param>
            <param name="alignment">Receives the alignment requirements of the operand in bytes.</param>
            <remarks>
            A stack operand is a parameter or a local variable. This function is used to properly build stack
            frame offsets for either type of stack operand.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.ICallingConvention.MoveReturnValue(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Requests the calling convention to create an appropriate move instruction to populate the return
            value of a method.
            </summary>
            <param name="ctx">The context.</param>
            <param name="operand">The operand, that's holding the return value.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.ICallingConvention.OffsetOfFirstLocal">
            <summary>
            Retrieves the offset of the first local variable from the stack frame start.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.ICallingConvention.OffsetOfFirstParameter">
            <summary>
            Retrieves the offset of the first parameter From the stack frame start.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IPlatformStage">
            <summary>
            This stage is platform specific stage
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IRegisterConstraint">
            <summary>
            This interface is used to present register constraints by native
            instructions to the register allocator.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.IRegisterConstraint.IsValidOperand(System.Int32,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Determines if this is a valid operand of the instruction.
            </summary>
            <param name="opIdx">The operand index to check.</param>
            <param name="op">The operand in use.</param>
            <returns>True if the used operand is valid or false, if it is not valid.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IRegisterConstraint.IsValidResult(System.Int32,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Determines if this is a valid result operand of the instruction.
            </summary>
            <param name="resIdx">The result operand index to check.</param>
            <param name="op">The operand in use.</param>
            <returns>True if the used operand is valid or false, if it is not valid.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.IRegisterConstraint.GetRegistersForOperand(System.Int32)">
            <summary>
            Returns an array of registers, that are valid for the specified operand of the instruction.
            </summary>
            <param name="opIdx">The operand index to check.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IRegisterConstraint.GetRegistersForResult(System.Int32)">
            <summary>
            Returns an array of registers, that are valid for the specified result operand of the instruction.
            </summary>
            <param name="resIdx">The result operand index to check.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.IRegisterConstraint.GetRegistersUsed">
            <summary>
            Retrieves an array of registers used by this instruction. This function is
            required if an instruction invalidates registers, which are not operands. It allows
            the register allocator to perform proper register spilling, if a used register also
            hosts a variable.
            </summary>
            <returns>An array of registers used by the instruction.</returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.IStackLayoutProvider">
            <summary>
            Interface provided by stack layout stages to provide code generation with stack reservation knowledge.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.IStackLayoutProvider.LocalsSize">
            <summary>
            Retrieves the total size of local variables on the stack in bytes as used by the compiled method.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.JitTrampolineAttribute">
            <summary>
            Marks a method as a jit trampoline.
            </summary>
            <remarks>
            The marked method is called in place of actual methods, which were not yet
            jitted to the native platform. Usually this attribute is applied to a method
            in the used Runtime along with a naked attribute, which prevents the method From
            having its own stack frame.
            <para/>
            The method, which was marked with the attribute must be static.
            </remarks>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.LabelOperand">
            <summary>
            An operand, which represents a label in the program data.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.MemoryOperand">
            <summary>
            Specifies a memory operand defined by an offset and an optional base register.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.MemoryOperand._base">
            <summary>
            Holds the base register, if this is a relative memory access.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.MemoryOperand._offset">
            <summary>
            Holds the address offset if used together with a base register or the absolute address, if register is null.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.MemoryOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,Mosa.Compiler.Framework.Register,System.IntPtr)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.Operands.MemoryOperand"/>.
            </summary>
            <param name="type">The type of data held in the operand.</param>
            <param name="base">The base register, if this is an indirect access.</param>
            <param name="offset">The offset from the base register or absolute address to retrieve.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.MemoryOperand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>The return value is true if the operands are equal; false if not.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.MemoryOperand.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.MemoryOperand.Base">
            <summary>
            Retrieves the base register of this memory operand.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.MemoryOperand.Offset">
            <summary>
            Retrieves the offset from the base register, or the absolute address if base is null.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.LabelOperand._label">
            <summary>
            Holds the label.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.LabelOperand._name">
            <summary>
            Holds the name
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.LabelOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,Mosa.Compiler.Framework.Register,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.Operands.LabelOperand"/>.
            </summary>
            <param name="type">The signature type of the operand data.</param>
            <param name="baseRegister">The base register for label offsets.</param>
            <param name="offset">The default offset from the base register.</param>
            <param name="label">The additional offset as indicated by a label.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.LabelOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Operands.LabelOperand"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.LabelOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.LabelOperand.Name">
            <summary>
            Gets the label of the operand.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.LabelOperand.Label">
            <summary>
            Gets the label of the operand.
            </summary>
            <value>The label.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.LinearRegisterAllocator">
            <summary>
            A minimalistic register assignment allocator.
            </summary>
            <remarks>
            This is not a real register allocator. It ensures that operations with register
            constraints are executed properly, but does not assign variables to fixed registers.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.LinearRegisterAllocator._liveRanges">
            <summary>
            List of live ranges found in the method.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LinearRegisterAllocator._registers">
            <summary>
            Holds the currently live registers and their backing stores.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.AssignRegisters">
            <summary>
            Assigns the registers.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.ReplaceOperand(Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange,Mosa.Compiler.Framework.Operands.RegisterOperand)">
            <summary>
            Replaces the operand.
            </summary>
            <param name="lr">The lr.</param>
            <param name="replacement">The replacement.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.SpillRegister(System.Collections.Generic.List{Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange},Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange)">
            <summary>
            Spills the register.
            </summary>
            <param name="active">The active.</param>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.AllocateRegister(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Allocates the register.
            </summary>
            <param name="operand">The operand.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.ExpireOldRanges(System.Int32,System.Collections.Generic.List{Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange})">
            <summary>
            Expires the old ranges.
            </summary>
            <param name="position">The position.</param>
            <param name="active">The active.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.ReinsertSpilledRange(Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange)">
            <summary>
            Reinserts the spilled range.
            </summary>
            <param name="lr">The lr.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.FillRegisterList">
            <summary>
            Fills the register list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.CaptureLiveRanges">
            <summary>
            Captures the live ranges.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.PickLastUseForDef(Mosa.Compiler.Framework.Operands.Operand,System.Int32)">
            <summary>
            Picks the last use for def.
            </summary>
            <param name="op">The op.</param>
            <param name="defLine">The def line.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.PickNextUse(Mosa.Compiler.Framework.Operands.Operand,System.Int32,System.Int32)">
            <summary>
            Picks the next use.
            </summary>
            <param name="op">The op.</param>
            <param name="line">The line.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.Sort(System.Collections.Generic.List{Mosa.Compiler.Framework.Context})">
            <summary>
            Sorts the specified list.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.NumberInstructions">
            <summary>
            Assigns every instruction an increasing offset value.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.CreateMoveInstruction(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Creates a move instruction that moves the value of the operand to the specified register.
            </summary>
            <param name="ctx">The context.</param>
            <param name="dest">The destination register.</param>
            <param name="src">The operand to move.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange.#ctor(Mosa.Compiler.Framework.BasicBlock,Mosa.Compiler.Framework.Operands.Operand,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange"/> class.
            </summary>
            <param name="block">The block.</param>
            <param name="op">The op.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="F:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange.Block">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange.Op">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange.Reg">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.LinearRegisterAllocator.LiveRange.End">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.MemberOperand">
            <summary>
            An operand, which represents a runtime member to be resolved at link time.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.MemberOperand.member">
            <summary>
            Holds the members.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.MemberOperand.#ctor(Mosa.Compiler.TypeSystem.RuntimeField)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.MemberOperand"/>.
            </summary>
            <param name="field">The runtime field to reference.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="field"/> is null.</exception>
        </member>
        <member name="M:Mosa.Compiler.Framework.MemberOperand.#ctor(Mosa.Compiler.TypeSystem.RuntimeMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.MemberOperand"/> class.
            </summary>
            <param name="method">The method to reference.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is null.</exception>
        </member>
        <member name="M:Mosa.Compiler.Framework.MemberOperand.#ctor(Mosa.Compiler.TypeSystem.RuntimeMember,Mosa.Compiler.Metadata.Signatures.SigType,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.MemberOperand"/> class.
            </summary>
            <param name="member">The member to reference.</param>
            <param name="type">The type of data held in the operand.</param>
            <param name="offset">The offset from the base register or absolute address to retrieve.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.MemberOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.MemberOperand.Member">
            <summary>
            Gets the runtime member of this operand.
            </summary>
            <value>The runtime member to link against.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.NakedAttribute">
            <summary>
            Marks a method as naked.
            </summary>
            <remarks>
            Naked methods do not get stack frames and register save/restore code inserted 
            for them. This is usually applied to special methods, which are invoked by
            native code or in special circumstances.
            </remarks>
        </member>
        <member name="M:Mosa.Compiler.Framework.NakedAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.NakedAttribute"/>.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.ObjectFieldOperand">
            <summary>
            An operand used to reference object data fields.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ObjectFieldOperand.#ctor(Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.TypeSystem.RuntimeField,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Operands.ObjectFieldOperand"/> class.
            </summary>
            <param name="objectInstance">The operand, representing the object instance.</param>
            <param name="field">The referenced field.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ObjectFieldOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.ObjectFileBuilderBase">
            <summary>
            Base class for object file builders.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.OnAssemblyCompileBegin(Mosa.Compiler.Framework.AssemblyCompiler)">
            <summary>
            Called when an assembly's compilation begins
            </summary>
            <param name="compiler">The compiler</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.OnAssemblyCompileEnd(Mosa.Compiler.Framework.AssemblyCompiler)">
            <summary>
            Called when an assembly's compilation ends
            </summary>
            <param name="compiler">The compiler</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.OnMethodCompileBegin(Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Called when an methods's compilation begins
            </summary>
            <param name="compiler">The compiler</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.OnMethodCompileEnd(Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Called when an methods's compilation ends
            </summary>
            <param name="compiler">The compiler</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.Allocate(Mosa.Compiler.TypeSystem.RuntimeMember,Mosa.Compiler.Linker.SectionKind,System.Int32,System.Int32)">
            <summary>
            Allocates the specified member.
            </summary>
            <param name="member">The member.</param>
            <param name="section">The section.</param>
            <param name="size">The size.</param>
            <param name="alignment">The alignment.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.Allocate(System.String,Mosa.Compiler.Linker.SectionKind,System.Int32,System.Int32)">
            <summary>
            Allocates a symbol of the given name in the specified section.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="section">The executable section to allocate From.</param>
            <param name="size">The number of bytes to allocate. If zero, indicates an unknown amount of memory is required.</param>
            <param name="alignment">The alignment. A value of zero indicates the use of a default alignment for the section.</param>
            <returns>
            A stream, which can be used to populate the section.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.Link(Mosa.Compiler.Linker.LinkType,Mosa.Compiler.TypeSystem.RuntimeMethod,System.Int32,System.Int32,Mosa.Compiler.TypeSystem.RuntimeMember)">
            <summary>
            Issues a linker request for the given runtime method.
            </summary>
            <param name="method">The method the patched code belongs to.</param>
            <param name="methodOffset">The offset inside the method where the patch is placed.</param>
            <param name="linkType">The type of link required.</param>
            <param name="methodRelativeBase">The base address, if a relative link is required.</param>
            <param name="target">The method or static field to link against.</param>
            <returns>
            The return value is the preliminary address to place in the generated machine 
            code. On 32-bit systems, only the lower 32 bits are valid. The above are not used. An implementation of
            IAssemblyLinker may not rely on 64-bits being stored in the memory defined by position.
            </returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.ObjectFileBuilderBase.Link(Mosa.Compiler.Linker.LinkType,Mosa.Compiler.TypeSystem.RuntimeMethod,System.Int32,System.Int32,System.String)">
            <summary>
            Issues a linker request for the given runtime method.
            </summary>
            <param name="linkType">The type of link required.</param>
            <param name="method">The method the patched code belongs to.</param>
            <param name="methodOffset">The offset inside the method where the patch is placed.</param>
            <param name="methodRelativeBase">The base address, if a relative link is required.</param>
            <param name="symbol">The linker symbol to link against.</param>
            <returns>
            The return value is the preliminary address to place in the generated machine
            code. On 32-bit systems, only the lower 32 bits are valid. The above are not used. An implementation of
            IAssemblyLinker may not rely on 64-bits being stored in the memory defined by position.
            </returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.ObjectFileBuilderBase.Name">
            <summary>
            The name of the object file builder
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.ObjectFileBuilderBase.Sections">
            <summary>
            Retrieves the collection of sections created during compilation.
            </summary>
            <value>The sections collection.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.ObjectFileBuilderBase.Symbols">
            <summary>
            Retrieves the collection of symbols known by the linker.
            </summary>
            <value>The symbol collection.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.ObjectFileBuilderBase.BaseAddress">
            <summary>
            Gets the base address.
            </summary>
            <value>The base address.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.ObjectFileBuilderBase.TimeStamp">
            <summary>
            Gets the time stamp.
            </summary>
            <value>The time stamp.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.ObjectFileBuilderBase.EntryPoint">
            <summary>
            Gets the entry point symbol.
            </summary>
            <value>The entry point symbol.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.ParameterOperand">
            <summary>
            An operand, which represents a parameter of a method.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.StackOperand">
            <summary>
            Represents an operand, that is located on the relative to the current stack frame.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.StackOperand._ssaVersion">
            <summary>
            Holds the SSA version of the stack operand.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.StackOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,Mosa.Compiler.Framework.Register,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.Operands.StackOperand"/>.
            </summary>
            <param name="type">Holds the type of data held in this operand.</param>
            <param name="register">Holds the stack frame register.</param>
            <param name="offset">The offset of the variable on stack. A positive value reflects the current function stack, a negative offset indicates a parameter.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.StackOperand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>The return value is true if the operands are equal; false if not.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.StackOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.StackOperand.Name">
            <summary>
            Retrieves the name of the stack operand.
            </summary>
            <value>The name of the stack operand.</value>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.StackOperand.Version">
            <summary>
            Gets or sets the SSA version of the operand.
            </summary>
            <value>The version of the stack operand.</value>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.ParameterOperand._parameter">
            <summary>
            The parameter object of the operand.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.ParameterOperand.#ctor(Mosa.Compiler.Framework.Register,Mosa.Compiler.TypeSystem.RuntimeParameter,Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.Operands.ParameterOperand"/>.
            </summary>
            <param name="register">The stack frame register.</param>
            <param name="param">The runtime parameter object, that represents this parameter.</param>
            <param name="type">The parameter type.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.ParameterOperand.Parameter">
            <summary>
            Returns the runtime parameter structure of this operand.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.ParameterOperand.Name">
            <summary>
            Retrieves the name of the stack operand.
            </summary>
            <value>The name of the stack operand.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.Register">
            <summary>
            Represents a machine specific abstract register.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Register._index">
            <summary>
            Holds the register index.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Register.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Mosa.Compiler.Framework.Register"/>.
            </summary>
            <param name="index">The numeric index of the register.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Register.IsValidSigType(Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Determines if the given signature type can be stored in this register.
            </summary>
            <param name="type">The signature type to check.</param>
            <returns>The return value is true if <paramref name="type"/> can be stored in this register.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Register.Index">
            <summary>
            Retrieves the numeric index of this register in its architecture.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Register.IsCallerSaved">
            <summary>
            Determines if this register is caller saved.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Register.IsFloatingPoint">
            <summary>
            Determines if this is a floating point register.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Register.RegisterCode">
            <summary>
            Holds the machine specific index or code of the register.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Register.Width">
            <summary>
            Returns the width of the register in bits.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.RegisterOperand">
            <summary>
            Represents an operand stored in a machine specific register.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.RegisterOperand._register">
            <summary>
            The register, where the operand is stored.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.RegisterOperand.#ctor(Mosa.Compiler.Metadata.Signatures.SigType,Mosa.Compiler.Framework.Register)">
            <summary>
            Initializes a new <see cref="T:Mosa.Compiler.Framework.Operands.RegisterOperand"/>.
            </summary>
            <param name="type">The signature type of the value the register holds.</param>
            <param name="register">The machine specific register used.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.RegisterOperand.Equals(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Compares with the given operand for equality.
            </summary>
            <param name="other">The other operand to compare with.</param>
            <returns>The return value is true if the operands are equal; false if not.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.RegisterOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.RegisterOperand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.RegisterOperand.IsRegister">
            <summary>
            This is a register operand.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.RegisterOperand.Register">
            <summary>
            Retrieves the register, where the operand is located.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.RuntimeSupportAttribute">
            <summary>
            Identifies runtime support for an CIL or IR opcode.
            </summary>
            <remarks>
            This attribute is used to mark runtime special methods. The attribute identifies a method
            to the compiler, which implements a specific opcode. Some opcodes require special runtime
            support, such as newobj, newarr. The jit and aot compilers require attributed methods to 
            successfully generate native code.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.RuntimeSupportAttribute._opCode">
            <summary>
            The opcode, which the attributed function supports.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.RuntimeSupportAttribute.#ctor(Mosa.Compiler.Framework.CIL.OpCode)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.RuntimeSupportAttribute"/> attribute.
            </summary>
            <param name="opcode">The opcode, which the attributed method supports.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.RuntimeSupportAttribute.OpCode">
            <summary>
            Retrieves the opcode, which the attributed method supports.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.SimpleRegisterAllocator">
            <summary>
            A simple register allocator.
            </summary>
            <remarks>
            The simple register allocator does not try to optimize register usage. It loads values 
            into registers as soon as it sees a load statement and spills them back as soon as it
            finds a matching store instruction or the register set is fully utilized. It performs one
            optimization: Values accessed only once (e.g. Parameters) are not loaded into a register,
            if the use-location supports a memory operand at that position.
            <para/>
            The simple register allocator requires register constraints for all instructions it finds.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.SimpleRegisterAllocator.TRACING">
            <summary>
            Controls tracing of the <see cref="T:Mosa.Compiler.Framework.SimpleRegisterAllocator"/>.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.SimpleRegisterAllocator._activeOperands">
            <summary>
            An array of operands in registers.
            </summary>
            <remarks>
            The array index is the physical register index in the register set.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.SimpleRegisterAllocator._registerSet">
            <summary>
            Holds the entire register set of the compilation target architecture.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.Run">
            <summary>
            Performs stage specific processing on the compiler context.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.SpillActiveOperands(Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Spills all active operands at the end of a basic block.
            </summary>
            <param name="block">The basic block to spill in.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.AssignRegisters(Mosa.Compiler.Framework.Context)">
            <summary>
            Assigns registers to operands of the instruction.
            </summary>
            <param name="ctx">The context.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.SpillRegisterIfInUse(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.RegisterOperand)">
            <summary>
            Spills the given register operand, if its register is in use.
            </summary>
            <param name="ctx">The context.</param>
            <param name="rop">The register operand to spill.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.InsertMove(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Inserts the move instruction to load or spill an operand.
            </summary>
            <param name="ctx">The context.</param>
            <param name="destination">The destination operand.</param>
            <param name="source">The source operand.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.GetRegisterOfOperand(Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Tries to find the register, which the given operand is assigned to.
            </summary>
            <param name="op">The operand to find the current register for.</param>
            <returns>The register operand of the assigned register.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.AllocateRegister(Mosa.Compiler.Framework.Register[],Mosa.Compiler.Framework.Operands.Operand)">
            <summary>
            Allocates a free register from the given register set.
            </summary>
            <param name="regs">The regs.</param>
            <param name="op">The res.</param>
            <returns>The allocated RegisterOperand or null, if no register is free.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.SpillRegister(Mosa.Compiler.Framework.Context,Mosa.Compiler.Metadata.Signatures.SigType,Mosa.Compiler.Framework.Register[])">
            <summary>
            Spills a register from the given register set.
            </summary>
            <param name="ctx">The context.</param>
            <param name="type">The signature type of the resulting operand.</param>
            <param name="regs">The instruction compatible subset of the register set.</param>
            <returns>A register from the given set.</returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.SpillRegister(Mosa.Compiler.Framework.Context,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Operands.RegisterOperand)">
            <summary>
            Spills the given register to its source operand.
            </summary>
            <param name="ctx">The context.</param>
            <param name="op">The operand to spill to.</param>
            <param name="rop">The register operand to spill.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.SimpleRegisterAllocator.AssignRegister(Mosa.Compiler.Framework.Operands.RegisterOperand,Mosa.Compiler.Framework.Operands.Operand,Mosa.Compiler.Framework.Context)">
            <summary>
            Assigns the operand to the register.
            </summary>
            <param name="rop">The register operand containing the register to assign.</param>
            <param name="op">The operand assigned to the register.</param>
            <param name="ctx">The context.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.StackLayoutStage">
            <summary>
            Calculates the layout of the stack of the method.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackLayoutStage.localsSize">
            <summary>
            Holds the total stack requirements of local variables of the compiled method.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackLayoutStage.Run">
            <summary>
            Runs the specified method compiler.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackLayoutStage.CollectLocalVariables(System.Collections.Generic.List{Mosa.Compiler.Framework.Operands.StackOperand},Mosa.Compiler.Framework.BasicBlock)">
            <summary>
            Collects all local variables assignments into a list.
            </summary>
            <param name="locals">Holds all locals found by the stage.</param>
            <param name="block">The block.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackLayoutStage.LayoutParameters(Mosa.Compiler.Framework.IMethodCompiler)">
            <summary>
            Lays out all parameters of the method.
            </summary>
            <param name="compiler">The method compiler providing the parameters.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackLayoutStage.LayoutVariables(System.Collections.Generic.IEnumerable{Mosa.Compiler.Framework.Operands.StackOperand},Mosa.Compiler.Framework.ICallingConvention,System.Int32,System.Int32)">
            <summary>
            Performs a stack layout of all local variables in the list.
            </summary>
            <param name="locals">The enumerable holding all locals.</param>
            <param name="cc">The cc.</param>
            <param name="offsetOfFirst">Specifies the offset of the first stack operand in the list.</param>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:Mosa.Compiler.Framework.StackLayoutStage.OrderVariables(System.Collections.Generic.List{Mosa.Compiler.Framework.Operands.StackOperand},Mosa.Compiler.Framework.ICallingConvention)">
            <summary>
            Sorts all local variables by their size requirements.
            </summary>
            <param name="locals">Holds all local variables to sort..</param>
            <param name="cc">The calling convention used to determine size and alignment requirements.</param>
        </member>
        <member name="T:Mosa.Compiler.Framework.StackTypeCode">
            <summary>
            Specifies the CLI stack type of a type reference.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackTypeCode.Unknown">
            <summary>
            Unknown stack type. This most likely hasn't been processed yet.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackTypeCode.Int32">
            <summary>
            CLI stack type is int32.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackTypeCode.Int64">
            <summary>
            CLI stack type is int64.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackTypeCode.N">
            <summary>
            CLI stack type is native int.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackTypeCode.F">
            <summary>
            CLI stack type is native floating point.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackTypeCode.Ptr">
            <summary>
            CLI Stack type managed ptr.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.StackTypeCode.O">
            <summary>
            CLI stack type is object reference.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.StaticFieldOperand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.StaticFieldOperand.#ctor(Mosa.Compiler.TypeSystem.RuntimeField,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Mosa.Compiler.Framework.Operands.StaticFieldOperand"/> class.
            </summary>
            <param name="field">The field.</param>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.StaticFieldOperand.ToString">
            <summary>
            Returns a string representation of <see cref="T:Mosa.Compiler.Framework.Operands.Operand"/>.
            </summary>
            <returns>A string representation of the operand.</returns>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.TemporaryOperand">
            <summary>
            A temporary stack local operand used to capture results from CIL operations.
            </summary>
            <remarks>
            Temporaries have a stack slot assigned to them however these, see VariableOperand and
            ParameterOperand can be optimized by a register allocator and move to registers.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.TemporaryOperand._label">
            <summary>
            Stores the label of the instruction, that created the temporary operand.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.TemporaryOperand.#ctor(System.Int32,Mosa.Compiler.Metadata.Signatures.SigType,Mosa.Compiler.Framework.Register,System.Int32)">
            <summary>
            Initializes a new instance of the virtual register.
            </summary>
            <param name="label">The virtual register number.</param>
            <param name="typeRef">The type reference of the virtual register.</param>
            <param name="register">The stack base register.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.TemporaryOperand.Id">
            <summary>
            Retrieves the id of the virtual register.
            </summary>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.TemporaryOperand.Name">
            <summary>
            Retrieves the name of the stack operand.
            </summary>
            <value>The name of the stack operand.</value>
        </member>
        <member name="T:Mosa.Compiler.Framework.Operands.LocalVariableOperand">
            <summary>
            Represents a variable in source code, which also acts as an operand to IL instructions.
            </summary>
            <remarks>
            Variables are specific operands, which are backed by memory on the stack. The stack index
            of the variable is managed by this class. Negative stack indices represent method parameters 
            and are only supported for those.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.Operands.LocalVariableOperand.name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="M:Mosa.Compiler.Framework.Operands.LocalVariableOperand.#ctor(Mosa.Compiler.Framework.Register,System.String,System.Int32,Mosa.Compiler.Metadata.Signatures.SigType)">
            <summary>
            Initializes an instance of <see cref="T:Mosa.Compiler.Framework.Operands.LocalVariableOperand"/>.
            </summary>
            <param name="register">Holds the stack frame register.</param>
            <param name="name">The name of the variable.</param>
            <param name="index">Holds the variable index.</param>
            <param name="type">The type of the variable.</param>
        </member>
        <member name="P:Mosa.Compiler.Framework.Operands.LocalVariableOperand.Name">
            <summary>
            Returns the name of the variable if it is available.
            </summary>
        </member>
        <member name="T:Mosa.Compiler.Framework.IR.VmCall">
            <summary>
            An enumeration used to identify icalls provided by the MOSA VM.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.AllocateObject">
            <summary>
            Allocates memory for a new object instance.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.AllocateArray">
            <summary>
            Allocates and initializes a new array.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.AllocateString">
            <summary>
            Allocates a string object.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.BoxChar">
            <summary>
            Boxes a value type.
            </summary>
            BoxInt8,
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.Castclass">
            <summary>
            Casts an object references to a specific type.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.GetFunctionPtr">
            <summary>
            Loads the address of a function.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.GetHandleForToken">
            <summary>
            Retrieves a handle for the specified token.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.GetVirtualFunctionPtr">
            <summary>
            Loads the address of a virtual function.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.IsInstanceOfType">
            <summary>
            Determines the instance of the type.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.IsInstanceOfInterfaceType">
            <summary>
            Determines the instance of the interface type.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.Memcpy">
            <summary>
            The method call represents a runtime defined memory copy method.
            </summary>
            <remarks>
            The memcpy method is similar to the memcpy function in C runtime libraries. It copies the
            specified number of bytes From a source to a destination block.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.Memset">
            <summary>
            The method call represents a runtime defined memory set method.
            </summary>
            <remarks>
            The memset method is similar to the memset function in C runtime libraries. It fills a block 
            of memory with a specific value.
            </remarks>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.Rethrow">
            <summary>
            Rethrows the given exception.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.Throw">
            <summary>
            Throws the given exception.
            </summary>
        </member>
        <member name="F:Mosa.Compiler.Framework.IR.VmCall.UnboxChar">
            <summary>
            Unboxes a value type.
            </summary>
        </member>
    </members>
</doc>
