// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

namespace Mosa.Compiler.Framework.IR
{
	/// <summary>
	/// IR Instructions
	/// </summary>
	public static class IRInstruction
	{
		public static readonly AddFloatR4 AddFloatR4 = new AddFloatR4();
		public static readonly AddFloatR8 AddFloatR8 = new AddFloatR8();
		public static readonly AddressOf AddressOf = new AddressOf();
		public static readonly AddSigned32 AddSigned32 = new AddSigned32();
		public static readonly AddSigned64 AddSigned64 = new AddSigned64();
		public static readonly AddUnsigned32 AddUnsigned32 = new AddUnsigned32();
		public static readonly AddUnsigned64 AddUnsigned64 = new AddUnsigned64();
		public static readonly ArithmeticShiftRight32 ArithmeticShiftRight32 = new ArithmeticShiftRight32();
		public static readonly ArithmeticShiftRight64 ArithmeticShiftRight64 = new ArithmeticShiftRight64();
		public static readonly BlockEnd BlockEnd = new BlockEnd();
		public static readonly BlockStart BlockStart = new BlockStart();
		public static readonly Break Break = new Break();
		public static readonly Call Call = new Call();
		public static readonly CallDirect CallDirect = new CallDirect();
		public static readonly CallDynamic CallDynamic = new CallDynamic();
		public static readonly CallInterface CallInterface = new CallInterface();
		public static readonly CallStatic CallStatic = new CallStatic();
		public static readonly CallVirtual CallVirtual = new CallVirtual();
		public static readonly CompareFloatR4 CompareFloatR4 = new CompareFloatR4();
		public static readonly CompareFloatR8 CompareFloatR8 = new CompareFloatR8();
		public static readonly CompareInteger32x32 CompareInteger32x32 = new CompareInteger32x32();
		public static readonly CompareInteger64x32 CompareInteger64x32 = new CompareInteger64x32();
		public static readonly CompareInteger64x64 CompareInteger64x64 = new CompareInteger64x64();
		public static readonly CompareIntegerBranch CompareIntegerBranch = new CompareIntegerBranch();
		public static readonly ConversionFloatR4ToFloatR8 ConversionFloatR4ToFloatR8 = new ConversionFloatR4ToFloatR8();
		public static readonly ConversionFloatR4ToInteger ConversionFloatR4ToInteger = new ConversionFloatR4ToInteger();
		public static readonly ConversionFloatR8ToFloatR4 ConversionFloatR8ToFloatR4 = new ConversionFloatR8ToFloatR4();
		public static readonly ConversionFloatR8ToInteger ConversionFloatR8ToInteger = new ConversionFloatR8ToInteger();
		public static readonly ConversionIntegerToFloatR4 ConversionIntegerToFloatR4 = new ConversionIntegerToFloatR4();
		public static readonly ConversionIntegerToFloatR8 ConversionIntegerToFloatR8 = new ConversionIntegerToFloatR8();
		public static readonly DivFloatR4 DivFloatR4 = new DivFloatR4();
		public static readonly DivFloatR8 DivFloatR8 = new DivFloatR8();
		public static readonly DivSigned32 DivSigned32 = new DivSigned32();
		public static readonly DivSigned64 DivSigned64 = new DivSigned64();
		public static readonly DivUnsigned32 DivUnsigned32 = new DivUnsigned32();
		public static readonly DivUnsigned64 DivUnsigned64 = new DivUnsigned64();
		public static readonly Epilogue Epilogue = new Epilogue();
		public static readonly ExceptionEnd ExceptionEnd = new ExceptionEnd();
		public static readonly ExceptionStart ExceptionStart = new ExceptionStart();
		public static readonly FilterEnd FilterEnd = new FilterEnd();
		public static readonly FilterStart FilterStart = new FilterStart();
		public static readonly FinallyEnd FinallyEnd = new FinallyEnd();
		public static readonly FinallyStart FinallyStart = new FinallyStart();
		public static readonly Flow Flow = new Flow();
		public static readonly Gen Gen = new Gen();
		public static readonly GotoLeaveTarget GotoLeaveTarget = new GotoLeaveTarget();
		public static readonly IntrinsicMethodCall IntrinsicMethodCall = new IntrinsicMethodCall();
		public static readonly IsInstanceOfType IsInstanceOfType = new IsInstanceOfType();
		public static readonly IsInstanceOfInterfaceType IsInstanceOfInterfaceType = new IsInstanceOfInterfaceType();
		public static readonly Jmp Jmp = new Jmp();
		public static readonly Kill Kill = new Kill();
		public static readonly KillAll KillAll = new KillAll();
		public static readonly KillAllExcept KillAllExcept = new KillAllExcept();
		public static readonly LoadConstant32 LoadConstant32 = new LoadConstant32();
		public static readonly LoadConstant64 LoadConstant64 = new LoadConstant64();
		public static readonly LoadCompound LoadCompound = new LoadCompound();
		public static readonly LoadFloatR4 LoadFloatR4 = new LoadFloatR4();
		public static readonly LoadFloatR8 LoadFloatR8 = new LoadFloatR8();
		public static readonly LoadInteger LoadInteger = new LoadInteger();
		public static readonly LoadSignExtended LoadSignExtended = new LoadSignExtended();
		public static readonly LoadZeroExtended LoadZeroExtended = new LoadZeroExtended();
		public static readonly LoadInteger32 LoadInteger32 = new LoadInteger32();
		public static readonly LoadInteger64 LoadInteger64 = new LoadInteger64();
		public static readonly LoadSignExtended8x32 LoadSignExtended8x32 = new LoadSignExtended8x32();
		public static readonly LoadSignExtended8x64 LoadSignExtended8x64 = new LoadSignExtended8x64();
		public static readonly LoadSignExtended16x64 LoadSignExtended16x64 = new LoadSignExtended16x64();
		public static readonly LoadSignExtended32x64 LoadSignExtended32x64 = new LoadSignExtended32x64();
		public static readonly LoadZeroExtended8x32 LoadZeroExtended8x32 = new LoadZeroExtended8x32();
		public static readonly LoadZeroExtended16x32 LoadZeroExtended16x32 = new LoadZeroExtended16x32();
		public static readonly LoadZeroExtended8x64 LoadZeroExtended8x64 = new LoadZeroExtended8x64();
		public static readonly LoadZeroExtended16x64 LoadZeroExtended16x64 = new LoadZeroExtended16x64();
		public static readonly LoadZeroExtended32x64 LoadZeroExtended32x64 = new LoadZeroExtended32x64();
		public static readonly LoadParameterCompound LoadParameterCompound = new LoadParameterCompound();
		public static readonly LoadParameterFloatR4 LoadParameterFloatR4 = new LoadParameterFloatR4();
		public static readonly LoadParameterFloatR8 LoadParameterFloatR8 = new LoadParameterFloatR8();
		public static readonly LoadParameterInteger32 LoadParameterInteger32 = new LoadParameterInteger32();
		public static readonly LoadParameterInteger64 LoadParameterInteger64 = new LoadParameterInteger64();
		public static readonly LoadParameterSignExtended8x32 LoadParameterSignExtended8x32 = new LoadParameterSignExtended8x32();
		public static readonly LoadParameterSignExtended16x32 LoadParameterSignExtended16x32 = new LoadParameterSignExtended16x32();
		public static readonly LoadParameterSignExtended8x64 LoadParameterSignExtended8x64 = new LoadParameterSignExtended8x64();
		public static readonly LoadParameterSignExtended16x64 LoadParameterSignExtended16x64 = new LoadParameterSignExtended16x64();
		public static readonly LoadParameterSignExtended32x64 LoadParameterSignExtended32x64 = new LoadParameterSignExtended32x64();
		public static readonly LoadParameterZeroExtended8x32 LoadParameterZeroExtended8x32 = new LoadParameterZeroExtended8x32();
		public static readonly LoadParameterZeroExtended16x32 LoadParameterZeroExtended16x32 = new LoadParameterZeroExtended16x32();
		public static readonly LoadParameterZeroExtended8x64 LoadParameterZeroExtended8x64 = new LoadParameterZeroExtended8x64();
		public static readonly LoadParameterZeroExtended16x64 LoadParameterZeroExtended16x64 = new LoadParameterZeroExtended16x64();
		public static readonly LoadParameterZeroExtended32x64 LoadParameterZeroExtended32x64 = new LoadParameterZeroExtended32x64();
		public static readonly LogicalAnd32 LogicalAnd32 = new LogicalAnd32();
		public static readonly LogicalAnd64 LogicalAnd64 = new LogicalAnd64();
		public static readonly LogicalNot32 LogicalNot32 = new LogicalNot32();
		public static readonly LogicalNot64 LogicalNot64 = new LogicalNot64();
		public static readonly LogicalOr32 LogicalOr32 = new LogicalOr32();
		public static readonly LogicalOr64 LogicalOr64 = new LogicalOr64();
		public static readonly LogicalXor32 LogicalXor32 = new LogicalXor32();
		public static readonly LogicalXor64 LogicalXor64 = new LogicalXor64();
		public static readonly MemorySet MemorySet = new MemorySet();
		public static readonly MoveCompound MoveCompound = new MoveCompound();
		public static readonly MoveFloatR4 MoveFloatR4 = new MoveFloatR4();
		public static readonly MoveFloatR8 MoveFloatR8 = new MoveFloatR8();
		public static readonly MoveInteger MoveInteger = new MoveInteger();
		public static readonly MoveSignExtended MoveSignExtended = new MoveSignExtended();
		public static readonly MoveZeroExtended MoveZeroExtended = new MoveZeroExtended();
		public static readonly MoveInteger32 MoveInteger32 = new MoveInteger32();
		public static readonly MoveInteger64 MoveInteger64 = new MoveInteger64();
		public static readonly MulFloatR4 MulFloatR4 = new MulFloatR4();
		public static readonly MulFloatR8 MulFloatR8 = new MulFloatR8();
		public static readonly MulSigned32 MulSigned32 = new MulSigned32();
		public static readonly MulSigned64 MulSigned64 = new MulSigned64();
		public static readonly MulUnsigned64 MulUnsigned64 = new MulUnsigned64();
		public static readonly MulUnsigned32 MulUnsigned32 = new MulUnsigned32();
		public static readonly NewArray NewArray = new NewArray();
		public static readonly NewObject NewObject = new NewObject();
		public static readonly NewString NewString = new NewString();
		public static readonly Nop Nop = new Nop();
		public static readonly Phi Phi = new Phi();
		public static readonly Prologue Prologue = new Prologue();
		public static readonly RemFloatR4 RemFloatR4 = new RemFloatR4();
		public static readonly RemFloatR8 RemFloatR8 = new RemFloatR8();
		public static readonly RemSigned32 RemSigned32 = new RemSigned32();
		public static readonly RemSigned64 RemSigned64 = new RemSigned64();
		public static readonly RemUnsigned32 RemUnsigned32 = new RemUnsigned32();
		public static readonly RemUnsigned64 RemUnsigned64 = new RemUnsigned64();
		public static readonly SetReturn SetReturn = new SetReturn();
		public static readonly SetReturnR4 SetReturnR4 = new SetReturnR4();
		public static readonly SetReturnR8 SetReturnR8 = new SetReturnR8();
		public static readonly SetReturn32 SetReturn32 = new SetReturn32();
		public static readonly SetReturn64 SetReturn64 = new SetReturn64();
		public static readonly SetReturnCompound SetReturnCompound = new SetReturnCompound();
		public static readonly SetLeaveTarget SetLeaveTarget = new SetLeaveTarget();
		public static readonly ShiftLeft32 ShiftLeft32 = new ShiftLeft32();
		public static readonly ShiftLeft64 ShiftLeft64 = new ShiftLeft64();
		public static readonly ShiftRight32 ShiftRight32 = new ShiftRight32();
		public static readonly ShiftRight64 ShiftRight64 = new ShiftRight64();
		public static readonly StableObjectTracking StableObjectTracking = new StableObjectTracking();
		public static readonly StoreCompound StoreCompound = new StoreCompound();
		public static readonly StoreFloatR4 StoreFloatR4 = new StoreFloatR4();
		public static readonly StoreFloatR8 StoreFloatR8 = new StoreFloatR8();
		public static readonly StoreInteger8 StoreInteger8 = new StoreInteger8();
		public static readonly StoreInteger16 StoreInteger16 = new StoreInteger16();
		public static readonly StoreInteger32 StoreInteger32 = new StoreInteger32();
		public static readonly StoreInteger64 StoreInteger64 = new StoreInteger64();
		public static readonly StoreParameterCompound StoreParameterCompound = new StoreParameterCompound();
		public static readonly StoreParameterFloatR4 StoreParameterFloatR4 = new StoreParameterFloatR4();
		public static readonly StoreParameterFloatR8 StoreParameterFloatR8 = new StoreParameterFloatR8();
		public static readonly StoreParameterInteger8 StoreParameterInteger8 = new StoreParameterInteger8();
		public static readonly StoreParameterInteger16 StoreParameterInteger16 = new StoreParameterInteger16();
		public static readonly StoreParameterInteger32 StoreParameterInteger32 = new StoreParameterInteger32();
		public static readonly StoreParameterInteger64 StoreParameterInteger64 = new StoreParameterInteger64();
		public static readonly SubFloatR4 SubFloatR4 = new SubFloatR4();
		public static readonly SubFloatR8 SubFloatR8 = new SubFloatR8();
		public static readonly SubSigned32 SubSigned32 = new SubSigned32();
		public static readonly SubSigned64 SubSigned64 = new SubSigned64();
		public static readonly SubUnsigned32 SubUnsigned32 = new SubUnsigned32();
		public static readonly SubUnsigned64 SubUnsigned64 = new SubUnsigned64();
		public static readonly Switch Switch = new Switch();
		public static readonly Throw Throw = new Throw();
		public static readonly TryEnd TryEnd = new TryEnd();
		public static readonly TryStart TryStart = new TryStart();
		public static readonly UnstableObjectTracking UnstableObjectTracking = new UnstableObjectTracking();
		public static readonly Rethrow Rethrow = new Rethrow();
		public static readonly GetVirtualFunctionPtr GetVirtualFunctionPtr = new GetVirtualFunctionPtr();
		public static readonly MemoryCopy MemoryCopy = new MemoryCopy();
		public static readonly Box Box = new Box();
		public static readonly Box32 Box32 = new Box32();
		public static readonly Box64 Box64 = new Box64();
		public static readonly BoxR4 BoxR4 = new BoxR4();
		public static readonly BoxR8 BoxR8 = new BoxR8();
		public static readonly Unbox Unbox = new Unbox();
		public static readonly Unbox32 Unbox32 = new Unbox32();
		public static readonly Unbox64 Unbox64 = new Unbox64();
		public static readonly To64 To64 = new To64();
		public static readonly Split64 Split64 = new Split64();
	}
}
