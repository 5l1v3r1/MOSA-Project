<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@include file="..\..\Templates\DynamicJsonConverter.ttinclude" #>
<#@include file="..\..\Templates\MultipleOutputHelper.ttinclude" #>
<#@ assembly name="Microsoft.CSharp" #>

<# var manager = Manager.Create(Host, GenerationEnvironment); #> 
<# manager.StartHeader(); #>
// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

<# manager.EndBlock(); #>
<#
var path = System.IO.Path.GetFullPath(Host.TemplateFile+"\\..\\");
var json = File.ReadAllText(path+"\\"+"IRInstructions.json");

var jss = new JavaScriptSerializer();
jss.RegisterConverters(new JavaScriptConverter[] { new DynamicJsonConverter() });

dynamic entries = jss.Deserialize(json, typeof(object)) as dynamic;

foreach (var entry in entries.Instructions) {
#>

<# manager.StartNewFile(entry.Name+".cs"); #>
<# if (entry.ResultType!="" || entry.ResultType2!="") { #>
using Mosa.Compiler.MosaTypeSystem;

<# } #>
namespace Mosa.Compiler.Framework.IR
{
	/// <summary>
	/// <#= entry.Name #>
<# if (!string.IsNullOrWhiteSpace(entry.Description)) { #>
	/// <#= entry.Description #>
<# } #>
	/// </summary>
	/// <seealso cref="Mosa.Compiler.Framework.IR.BaseIRInstruction" />
	public sealed class <#= entry.Name #> : BaseIRInstruction
	{
		public <#= entry.Name #>()
			: base(<#= entry.OperandCount #>, <#= entry.ResultCount #>)
		{
		}
<# if (entry.FlowControl!="Next") { #>

		public override FlowControl FlowControl { get { return FlowControl.<#= entry.FlowControl #>; } }
<# } #>
<# if (entry.ResultType!="") { #>

		public override BuiltInType ResultType { get { return BuiltInType.<#= entry.ResultType #>; } }
<# } #>
<# if (entry.ResultType2!="") { #>

		public override BuiltInType ResultType2 { get { return BuiltInType.<#= entry.ResultType2 #>; } }
<# } #>
<# if (entry.IgnoreDuringCodeGeneration=="true") { #>

		public override bool IgnoreDuringCodeGeneration { get { return true; } }
<# } #>
<# if (entry.IgnoreInstructionBasicBlockTargets=="true") { #>

		public override bool IgnoreInstructionBasicBlockTargets { get { return true; } }
<# } #>
<# if (entry.VariableOperandCount=="true") { #>

		public override bool VariableOperandCount { get { return true; } }
<# } #>
<# if (entry.Commutative=="true") { #>

		public override bool Commutative { get { return true; } }
<# } #>
<# if (entry.HasSideEffect=="true") { #>

		public override bool HasSideEffect { get { return true; } }
<# } #>
	}
}
<# } #>
<# manager.EndBlock(); #>
<# manager.Process(true); #>
