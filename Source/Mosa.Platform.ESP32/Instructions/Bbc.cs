// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using Mosa.Compiler.Framework;

namespace Mosa.Platform.ESP32.Instructions
{
	/// <summary>
	/// Bbc - Branch if Bit Clear, BBC branches if the bit specified by the low five bits of address register at is clear in address register as. For little-endian processors, bit 0 is the least significant bit and bit 31 is the most significant bit. For big-endian processors, bit 0 is the most significant bit and bit 31 is the least significant bit. The target instruction address of the branch is given by the address of the BBC instruction, plus the sign-extended 8-bit imm8 field of the instruction plus four. If the specified bit is set, execution continues with the next sequential instruction. The inverse of BBC is BBS.
	/// </summary>
	/// <seealso cref="Mosa.Platform.ESP32.ESP32Instruction" />
	public sealed class Bbc : ESP32Instruction
	{
		public override int ID { get { return 710; } }

		internal Bbc()
			: base(1, 3)
		{
		}

		public override void Emit(InstructionNode node, BaseCodeEmitter emitter)
		{
			System.Diagnostics.Debug.Assert(node.ResultCount == 1);
			System.Diagnostics.Debug.Assert(node.OperandCount == 3);

			emitter.OpcodeEncoder.Append8BitImmediate(node.Operand2);
			emitter.OpcodeEncoder.AppendNibble(0b0101);
			emitter.OpcodeEncoder.AppendNibble(node.Operand1.Register.RegisterCode);
			emitter.OpcodeEncoder.AppendNibble(node.Operand2.Register.RegisterCode);
			emitter.OpcodeEncoder.AppendNibble(0b0111);
		}
	}
}
